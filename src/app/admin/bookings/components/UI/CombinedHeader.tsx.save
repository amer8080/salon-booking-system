'use client'

import React, { useState, useEffect } from 'react'
import { Calendar, CalendarDays, Clock, ChevronLeft, ChevronRight, RotateCcw } from 'lucide-react'
import { DatePicker } from 'antd'
import dayjs from 'dayjs'
import 'dayjs/locale/ar'

type ViewMode = 'month' | 'week' | 'day'

interface CombinedHeaderProps {
  currentView: ViewMode
  onViewChange: (view: ViewMode) => void
  currentMonth: Date
  onNavigateMonth: (direction: 'prev' | 'next') => void
  onChangeMonth: (monthIndex: number) => void
  onChangeYear: (year: number) => void
  onGoToToday: () => void
  className?: string
}

export default function CombinedHeader({
  currentView,
  onViewChange,
  currentMonth,
  onNavigateMonth,
  onChangeMonth,
  onChangeYear,
  onGoToToday,
  className = ""
}: CombinedHeaderProps) {
  
  const [showMonthPicker, setShowMonthPicker] = useState(false)
  
  // 🔥 إصلاح تمييز الشهر الحالي
  useEffect(() => {
    if (showMonthPicker) {
      // تأخير صغير للسماح لـ DatePicker بالرسم أولاً
      const timer = setTimeout(() => {
        const currentRealMonth = new Date().getMonth() // يونيو = 5
        const cells = document.querySelectorAll('.ant-picker-cell')
        
        cells.forEach((cell, index) => {
          // Jun هو العنصر رقم 5 في grid الأشهر (0-based)
          if (index === currentRealMonth) {
            cell.classList.add('force-current-month')
          } else {
            cell.classList.remove('force-current-month')
          }
        })
      }, 100)
      
      return () => clearTimeout(timer)
    }
  }, [showMonthPicker])
  
  const views = [
    { key: 'month' as ViewMode, label: 'شهري', icon: Calendar },
    { key: 'week' as ViewMode, label: 'أسبوعي', icon: CalendarDays },
    { key: 'day' as ViewMode, label: 'يومي', icon: Clock }
  ]

  const monthYear = dayjs(currentMonth).locale('ar').format('MMMM YYYY')
  
  const today = new Date()
  const isCurrentMonth = today.getFullYear() === currentMonth.getFullYear() 
                       && today.getMonth() === currentMonth.getMonth()

  const handleMonthChange = (date: any) => {
    if (date) {
      onChangeYear(date.year())
      onChangeMonth(date.month())
    }
    setShowMonthPicker(false)
  }

  return (
    <div className={`bg-white rounded-xl shadow-lg border border-gray-200 p-4 mb-6 ${className}`}>
      <div className="flex items-center justify-between">
        
        {/* أزرار التبديل */}
        <div className="flex items-center bg-gray-100 rounded-xl p-1">
          {views.map((view) => {
            const Icon = view.icon
            const isActive = currentView === view.key
            
            return (
              <button
                key={view.key}
                onClick={() => onViewChange(view.key)}
                className={`flex items-center space-x-2 rtl:space-x-reverse px-3 py-2 rounded-lg font-medium text-sm transition-all duration-200 ${
                  isActive 
                    ? 'bg-white text-purple-600 shadow-sm border border-purple-200' 
                    : 'text-gray-600 hover:text-gray-800 hover:bg-gray-200'
                }`}
              >
                <Icon className={`w-4 h-4 ${isActive ? 'text-purple-600' : 'text-gray-500'}`} />
                <span>{view.label}</span>
              </button>
            )
          })}
        </div>

        <div className="w-px h-8 bg-gray-300 mx-4" />

        {/* عرض التاريخ */}
        <div className="flex items-center space-x-3 rtl:space-x-reverse relative">
          <button
            onClick={() => setShowMonthPicker(true)}
            className="flex items-center space-x-2 rtl:space-x-reverse px-4 py-2 rounded-lg text-lg font-bold text-gray-800 hover:bg-gray-100 transition-colors duration-200"
          >
            <Calendar className="w-5 h-5 text-purple-600" />
            <span>{monthYear}</span>
          </button>

          <DatePicker 
            picker="month"
            value={dayjs(currentMonth)}
            onChange={handleMonthChange}
            open={showMonthPicker}
            onOpenChange={setShowMonthPicker}
            style={{ position: 'absolute', opacity: 0, pointerEvents: 'none' }}
          />
          
          {isCurrentMonth && (
            <span className="px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs font-medium">
              الشهر الحالي
            </span>
          )}
        </div>

        <div className="w-px h-8 bg-gray-300 mx-4" />

        {/* أدوات التنقل */}
        <div className="flex items-center space-x-2 rtl:space-x-reverse">
          <button
            onClick={onGoToToday}
            disabled={isCurrentMonth}
            className={`flex items-center space-x-1 rtl:space-x-reverse px-3 py-2 rounded-lg font-medium text-sm transition-all duration-200 ${
              isCurrentMonth
                ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                : 'bg-blue-100 hover:bg-blue-200 text-blue-600 hover:text-blue-700'
            }`}
          >
            <RotateCcw className={`w-4 h-4 ${isCurrentMonth ? 'text-gray-400' : 'text-blue-600'}`} />
            <span>اليوم</span>
          </button>

          <div className="flex items-center space-x-1 rtl:space-x-reverse">
            <button
              onClick={() => onNavigateMonth('prev')}
              className="flex items-center justify-center w-8 h-8 rounded-lg bg-purple-100 hover:bg-purple-200 text-purple-600 transition-colors duration-200"
            >
              <ChevronRight className="w-4 h-4" />
            </button>
            
            <button
              onClick={() => onNavigateMonth('next')}
              className="flex items-center justify-center w-8 h-8 rounded-lg bg-purple-100 hover:bg-purple-200 text-purple-600 transition-colors duration-200"
            >
              <ChevronLeft className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

// Hook مساعد للعروض
export function useViewMode(initialView: ViewMode = 'month') {
  const [viewMode, setViewMode] = React.useState<ViewMode>(initialView)
  
  const handleViewChange = (newView: ViewMode) => {
    setViewMode(newView)
  }

  return {
    viewMode,
    setViewMode: handleViewChange
  }
}
