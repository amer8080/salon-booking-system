'use client'

import { useCallback } from 'react'
import { Booking, BlockedTime } from '../../types/booking.types'
import { formatIstanbulDate, getDaysInMonth } from '@/lib/timezone'

interface MonthViewProps {
  // ุจูุงูุงุช ุงูุชุงุฑูุฎ
  currentMonth: Date

  // ุจูุงูุงุช ุงูุญุฌูุฒุงุช
  bookings: Booking[]
  blockedTimes: BlockedTime[]

  // ุงูุชูุงุนู
  onSwitchToDayView: (date: string) => void

  className?: string
}

export default function MonthView({
  currentMonth,
  bookings,
  blockedTimes,
  onSwitchToDayView,
  className = ""
}: MonthViewProps) {

  // ุญุณุงุจ ุฃูุงู ุงูุดูุฑ
  const daysData = getDaysInMonth(currentMonth)

  // ุฃุณูุงุก ุฃูุงู ุงูุฃุณุจูุน ูุฎุชุตุฑุฉ ูุน ุชุฑุชูุจ RTL ุตุญูุญ (ูู ุงููููู ูููุณุงุฑ)
  // ุงูุณุจุชุ ุงูุฌูุนุฉุ ุงูุฎููุณุ ุงูุฃุฑุจุนุงุกุ ุงูุซูุงุซุงุกุ ุงูุงุซูููุ ุงูุฃุญุฏ
  const dayNames = ['ุณ', 'ุฌ', 'ุฎ', 'ุฑ', 'ุซ', 'ู', 'ุญ']

  // ูุญุต ุฅุฐุง ูุงู ุงูููู ูููู
  const isDayBlocked = useCallback((dateString: string) => {
    return blockedTimes.some(blocked =>
      blocked.startTime === null &&
      blocked.endTime === null &&
      blocked.date === dateString
    )
  }, [blockedTimes])

  // ุงูุญุตูู ุนูู ุญุฌูุฒุงุช ุงูููู
  const getBookingsForDate = useCallback((dateString: string) => {
    return bookings.filter(booking => {
      const bookingDate = formatIstanbulDate(new Date(booking.date), 'date')
      return bookingDate === dateString
    })
  }, [bookings])

  // ูุญุต ุฅุฐุง ูุงู ุงูููู ูุญุฌูุฒ
  const isDayBooked = useCallback((dateString: string) => {
    const dayBookings = getBookingsForDate(dateString)
    return dayBookings.length > 0
  }, [getBookingsForDate])

  // ูุนุงูุฌุฉ ุงูููุฑ ุนูู ุงูููู
  const handleDayClick = useCallback((dayData: {date: string, day: number, isCurrentMonth: boolean}) => {
    if (!dayData.isCurrentMonth) return

    // ุงูุชุญูู ููุนุฑุถ ุงููููู
    onSwitchToDayView(dayData.date)
  }, [onSwitchToDayView])

  return (
    <div className={`bg-white rounded-xl shadow-lg p-3 lg:p-6 ${className}`} dir="rtl">

      {/* ุฃุณูุงุก ุฃูุงู ุงูุฃุณุจูุน ูุน RTL */}
      <div className="grid grid-cols-7 gap-1 lg:gap-2 mb-2 lg:mb-4">
        {dayNames.map((dayName, index) => (
          <div
            key={`${dayName}-${index}`}
            className="h-6 lg:h-8 flex items-center justify-center text-xs lg:text-sm font-semibold text-gray-600 bg-gray-50 rounded-lg"
          >
            {dayName}
          </div>
        ))}
      </div>

      {/* ุดุจูุฉ ุงูุชูููู ุงููุถุบูุทุฉ ูุน ุงูุฃููุงู ุงููุฎุตุตุฉ ู RTL */}
      <div className="grid grid-cols-7 gap-1 lg:gap-2" dir="rtl">
        {daysData.map((dayData, index) => {
          // ุงูุชุญูู ูู ุงูุจูุงูุงุช
          if (!dayData || !dayData.isCurrentMonth) {
            return (
              <div
                key={`empty-${index}`}
                className="h-10 lg:h-12 flex items-center justify-center"
              >
                {dayData && (
                  <span className="text-xs text-gray-300">{dayData.day}</span>
                )}
              </div>
            )
          }

          const dateString = dayData.date
          const isToday = dayData.isToday
          const isBooked = isDayBooked(dateString)
          const isBlocked = isDayBlocked(dateString)
          const isPast = dayData.isPast

          // ุชุญุฏูุฏ ูุฆุงุช CSS ููุฏุงุฆุฑุฉ ุจุงุณุชุฎุฏุงู ุงูุฃููุงู ุงููุฎุตุตุฉ ูุน ุชุญุณูู ุงูุฌูุงู
          let circleClasses = 'w-6 h-6 lg:w-8 lg:h-8 rounded-full flex items-center justify-center text-xs lg:text-sm font-medium transition-all duration-200 smooth-transition'
          
          if (isToday) {
            circleClasses += ' booking-color-today booking-text-today' // ุงูููู ุงูุญุงูู - ุฃููุงู ูุฎุตุตุฉ
          } else if (isBooked) {
            circleClasses += ' booking-color-booked booking-text-booked' // ุฃูุงู ูุญุฌูุฒุฉ - ุฃููุงู ูุฎุตุตุฉ
          } else if (isBlocked) {
            circleClasses += ' booking-color-blocked booking-text-blocked' // ุฃูุงู ููููุฉ - ุฃููุงู ูุฎุตุตุฉ
          } else {
            circleClasses += isPast 
              ? ' text-gray-400' 
              : ' text-gray-700 booking-active-available' // ุฃูุงู ุนุงุฏูุฉ ูุน ุชูุงุนู ูุฎุตุต
          }

          return (
            <button
              key={dateString}
              onClick={() => handleDayClick(dayData)}
              className="h-10 lg:h-12 flex items-center justify-center transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-50 smooth-transition"
              title={`${dayData.day} - ${isToday ? 'ุงูููู' : isBooked ? 'ูุญุฌูุฒ' : isBlocked ? 'ูููู' : 'ูุชุงุญ'}`}
            >
              <div className={circleClasses}>
                {dayData.day}
              </div>
            </button>
          )
        })}
      </div>

      {/* ููุฎุต ุณุฑูุน ูุน ุงูุฃููุงู ุงููุฎุตุตุฉ - ูุญุณู ููุฌูุงู ูุน RTL */}
      <div className="mt-3 lg:mt-6 pt-3 lg:pt-4 border-t border-gray-100">
        <div className="flex flex-wrap items-center justify-center gap-3 lg:gap-6 text-xs lg:text-sm">

          {/* ูุคุดุฑ ุงูููู ุงูุญุงูู */}
          <div className="flex items-center space-x-1 lg:space-x-2 rtl:space-x-reverse">
            <div className="w-3 h-3 lg:w-4 lg:h-4 booking-color-today rounded-full"></div>
            <span className="text-gray-600">ุงูููู ุงูุญุงูู</span>
          </div>

          {/* ูุคุดุฑ ุงูุฃูุงู ุงููุญุฌูุฒุฉ - ุฃููุงู ูุฎุตุตุฉ */}
          <div className="flex items-center space-x-1 lg:space-x-2 rtl:space-x-reverse">
            <div className="w-3 h-3 lg:w-4 lg:h-4 booking-color-booked rounded-full"></div>
            <span className="text-gray-600">ูุญุฌูุฒุฉ ({bookings.length})</span>
          </div>

          {/* ูุคุดุฑ ุงูุฃูุงู ุงูููููุฉ */}
          {blockedTimes.filter(b => b.startTime === null && b.endTime === null).length > 0 && (
            <div className="flex items-center space-x-1 lg:space-x-2 rtl:space-x-reverse">
              <div className="w-3 h-3 lg:w-4 lg:h-4 booking-color-blocked rounded-full"></div>
              <span className="text-gray-600">ููููุฉ ({blockedTimes.filter(b => b.startTime === null && b.endTime === null).length})</span>
            </div>
          )}
        </div>

        {/* ูุตูุญุฉ ูููุณุชุฎุฏู - ูุฎููุฉ ูู ุงูุฌูุงู ูุชูููุฑ ูุณุงุญุฉ ูุน RTL */}
        <div className="mt-2 lg:mt-3 text-center">
          <p className="text-xs text-gray-500 hidden sm:block">
            ๐ก ุงููุฑ ุนูู ุฃู ููู ููุงูุชูุงู ููุนุฑุถ ุงููููู ุงูููุตู
          </p>
        </div>
      </div>
    </div>
  )
}