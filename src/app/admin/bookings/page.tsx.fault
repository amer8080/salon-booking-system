'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import {
  Calendar,
  Edit,
  Trash2,
  Clock,
  Phone,
  User,
  Sparkles,
  ArrowLeft,
  LogOut,
  ChevronLeft,
  ChevronRight,
  Plus,
  Copy,
  MessageCircle,
  AlertTriangle,
  Save,
  X,
  Check,
  Lock,
  Unlock,
  Shield,
  List,
  Grid3X3
} from 'lucide-react'
import { fromDatabaseTime, formatIstanbulDate, formatArabicDate, parseIstanbulDate } from '@/lib/timezone'

interface Booking {
  id: number
  customerName: string
  customerPhone: string
  date: string
  startTime: string
  endTime: string
  services: string[]
  status: 'confirmed' | 'cancelled' | 'completed'
  totalPrice: number
  createdAt: string
}

interface Service {
  id: string
  nameAr: string
  nameEn: string
  nameTr: string
  category: string
  price: number
  duration: number
  isActive: boolean
}

interface EditBookingData {
  customerName: string
  customerPhone: string
  selectedDate: string
  selectedTime: string
  selectedServices: string[]
  notes?: string
}

interface BlockedTime {
  id: number
  date: string
  startTime: string | null
  endTime: string | null
  isRecurring: boolean
  recurringType: string | null
  reason: string | null
  createdBy: string
  createdAt: string
}

type ViewType = 'month' | 'week' | 'day'

interface EnhancedDateRange extends DateRange {
  view: ViewType
}

export default function AdminBookingsPage() {
  const [bookings, setBookings] = useState<Booking[]>([])
  const [services, setServices] = useState<{ [key: string]: string }>({})
  const [servicesWithCategories, setServicesWithCategories] = useState<{ [key: string]: Service }>({})
  const [allServices, setAllServices] = useState<Service[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState('')
  const [selectedDate, setSelectedDate] = useState('')
  const [currentMonth, setCurrentMonth] = useState(new Date())
  const [currentDateRange, setCurrentDateRange] = useState(() => {
    const now = new Date()
    const year = now.getFullYear()
    const month = now.getMonth()
    return {
      startDate: `${year}-${(month + 1).toString().padStart(2, '0')}-01`,
      endDate: new Date(year, month + 1, 0).toISOString().split('T')[0],
      view: 'month'
    }
  })
 
 
const [currentView, setCurrentView] = useState<ViewType>('month')
const [enhancedCurrentDate, setEnhancedCurrentDate] = useState(new Date())

  const [selectedDayBookings, setSelectedDayBookings] = useState<Booking[]>([])
  const [showPhoneMenu, setShowPhoneMenu] = useState<string | null>(null)

  const [editingBooking, setEditingBooking] = useState<Booking | null>(null)
  const [deletingBooking, setDeletingBooking] = useState<Booking | null>(null)
  const [editData, setEditData] = useState<EditBookingData>({
    customerName: '',
    customerPhone: '',
    selectedDate: '',
    selectedTime: '',
    selectedServices: [],
    notes: ''
  })
  const [deleteReason, setDeleteReason] = useState('')

  // حالات الحجز الجديد
  const [isCreatingBooking, setIsCreatingBooking] = useState(false)
  const [newBookingData, setNewBookingData] = useState<EditBookingData>({
    customerName: '',
    customerPhone: '',
    selectedDate: '',
    selectedTime: '',
    selectedServices: [],
    notes: ''
  })

  const [blockedTimes, setBlockedTimes] = useState<BlockedTime[]>([])
  const [isSelectingDaysForBlock, setIsSelectingDaysForBlock] = useState(false)
  const [isSelectingTimesForBlock, setIsSelectingTimesForBlock] = useState(false)
  const [selectedDaysToBlock, setSelectedDaysToBlock] = useState<string[]>([])
  const [selectedTimesToBlock, setSelectedTimesToBlock] = useState<string[]>([])

  const router = useRouter()

  const monthNames = [
    'يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو',
    'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'
  ]

const dayNamesShort = ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت']
  const availableYears = [2020, 2021, 2022, 2023, 2024, 2025, 2026]

  const categoryColors = {
    hair: 'bg-green-100 text-green-700',
    makeup: 'bg-purple-100 text-purple-700',
    nails: 'bg-blue-100 text-blue-700',
    skincare: 'bg-yellow-100 text-yellow-700',
    default: 'bg-gray-100 text-gray-700'
  }

  const getServiceColor = (serviceId: string) => {
    const service = servicesWithCategories[serviceId]
    if (!service) return categoryColors.default

    switch (service.category) {
      case 'hair': return categoryColors.hair
      case 'makeup': return categoryColors.makeup
      case 'nails': return categoryColors.nails
      case 'skincare': return categoryColors.skincare
      default: return categoryColors.default
    }
  }

  const generateAdminTimeSlots = () => {
    const slots = []
    for (let hour = 11; hour <= 19; hour++) {
      for (let minute = 0; minute < 60; minute += 30) {
        if (hour === 19 && minute > 0) break
        const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`
        slots.push(timeString)
      }
    }
    return slots
  }

  const adminTimeSlots = generateAdminTimeSlots()

  useEffect(() => {
    const token = localStorage.getItem('adminToken')
    if (!token) {
      router.push('/admin/login')
      return
    }

    fetchServices()
    fetchBlockedTimes()
  }, [router])

  useEffect(() => {
    if (Object.keys(services).length > 0) {
      fetchBookings()
    }
  }, [services])
  // جلب الحجوزات عند تغيير النطاق الزمني
  useEffect(() => {
    if (Object.keys(services).length > 0) {
      fetchBookings()
    }
  }, [currentDateRange, services])

  const fetchServices = async () => {
    try {
      const response = await fetch('/api/services')
      const data = await response.json()

      if (data.success) {
        const serviceMap: { [key: string]: string } = {}
        const serviceCategoryMap: { [key: string]: Service } = {}

        data.services.forEach((service: any) => {
          serviceMap[service.id] = service.nameAr
          serviceCategoryMap[service.id] = service
        })

        setServices(serviceMap)
        setServicesWithCategories(serviceCategoryMap)
      }

      const adminResponse = await fetch('/api/admin/services')
      const adminData = await adminResponse.json()

      if (adminData.success) {
        setAllServices(adminData.services.filter((service: Service) => service.isActive))
      }
    } catch (error) {
      console.error('خطأ في تحميل الخدمات:', error)
    }
  }

  const fetchBookings = async () => {
    if (Object.keys(services).length === 0) return
    try {
      setLoading(true)
      const response = await fetch(
        `/api/admin/bookings?startDate=${currentDateRange.startDate}&endDate=${currentDateRange.endDate}&view=${currentDateRange.view}`
      )
      const data = await response.json()

      if (data.success) {
        const bookingsWithServiceNames = data.bookings.map((booking: any) => ({
          ...booking,
          serviceNames: booking.services.map((serviceId: string) =>
            services[serviceId] || `خدمة ${serviceId}`
          )
        }))
        setBookings(bookingsWithServiceNames)
      } else {
        setError(data.error || 'فشل في تحميل الحجوزات')
      }
    } catch (error) {
      setError('خطأ في الاتصال بالخادم')
    } finally {
      setLoading(false)
    }
  }

  const fetchBlockedTimes = async () => {
    try {
      const response = await fetch('/api/admin/blocked-times')
      const data = await response.json()

      if (data.success) {
        setBlockedTimes(data.blockedTimes)
      }
    } catch (error) {
      console.error('خطأ في تحميل الأوقات المقفلة:', error)
    }
  }

  const isDayBlocked = (dateString: string) => {
    return blockedTimes.some(blocked =>
      blocked.date === dateString &&
      blocked.startTime === null &&
      blocked.endTime === null
    )
  }

  const isTimeBlocked = (dateString: string, timeString: string) => {
    return blockedTimes.some(blocked =>
      blocked.date === dateString &&
      blocked.startTime === timeString
    )
  }

  const getBlockedDayId = (dateString: string) => {
    const blocked = blockedTimes.find(blocked =>
      blocked.date === dateString &&
      blocked.startTime === null &&
      blocked.endTime === null
    )
    return blocked?.id
  }

  const getBlockedTimeId = (dateString: string, timeString: string) => {
    const blocked = blockedTimes.find(blocked =>
      blocked.date === dateString &&
      blocked.startTime === timeString
    )
    return blocked?.id
  }

  const toggleDaySelection = (dateString: string) => {
    setSelectedDaysToBlock(prev =>
      prev.includes(dateString)
        ? prev.filter(d => d !== dateString)
        : [...prev, dateString]
    )
  }

  const toggleTimeSelection = (timeString: string) => {
    const isBooked = selectedDayBookings.some(booking => {
      const startDateTime = fromDatabaseTime(booking.startTime)
      const bookingTime = formatIstanbulDate(startDateTime, 'time')
      return bookingTime === timeString
    })

    if (isBooked) return

    setSelectedTimesToBlock(prev =>
      prev.includes(timeString)
        ? prev.filter(t => t !== timeString)
        : [...prev, timeString]
    )
  }

  const processSelectedDays = async () => {
    if (selectedDaysToBlock.length === 0) {
      alert('يرجى اختيار أيام')
      return
    }

    const daysToBlock = selectedDaysToBlock.filter(date => !isDayBlocked(date))
    const daysToUnblock = selectedDaysToBlock.filter(date => isDayBlocked(date))

    try {
      if (daysToBlock.length > 0) {
        const blockRequests = daysToBlock.map(date =>
          fetch('/api/admin/blocked-times', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              date: date,
              startTime: null,
              endTime: null,
              isRecurring: false,
              reason: 'إقفال يوم كامل'
            })
          })
        )
        await Promise.all(blockRequests)
      }

      if (daysToUnblock.length > 0) {
        const unblockRequests = daysToUnblock.map(date => {
          const blockedId = getBlockedDayId(date)
          return blockedId ? fetch(`/api/admin/blocked-times/${blockedId}`, {
            method: 'DELETE'
          }) : null
        }).filter(Boolean)

        await Promise.all(unblockRequests)
      }

      setSelectedDaysToBlock([])
      setIsSelectingDaysForBlock(false)
      fetchBlockedTimes()

      const message = []
      if (daysToBlock.length > 0) message.push(`تم إقفال ${daysToBlock.length} يوم`)
      if (daysToUnblock.length > 0) message.push(`تم فتح ${daysToUnblock.length} يوم`)
      alert(message.join(' و ') + '!')
    } catch (error) {
      alert('خطأ في معالجة الأيام')
    }
  }

  const processSelectedTimes = async () => {
    if (selectedTimesToBlock.length === 0) {
      alert('يرجى اختيار أوقات')
      return
    }

    const timesToBlock = selectedTimesToBlock.filter(time => !isTimeBlocked(selectedDate, time))
    const timesToUnblock = selectedTimesToBlock.filter(time => isTimeBlocked(selectedDate, time))

    try {
      if (timesToBlock.length > 0) {
        const blockRequests = timesToBlock.map(time =>
          fetch('/api/admin/blocked-times', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              date: selectedDate,
              startTime: time,
              endTime: time,
              isRecurring: false,
              reason: 'إقفال وقت محدد'
            })
          })
        )
        await Promise.all(blockRequests)
      }

      if (timesToUnblock.length > 0) {
        const unblockRequests = timesToUnblock.map(time => {
          const blockedId = getBlockedTimeId(selectedDate, time)
          return blockedId ? fetch(`/api/admin/blocked-times/${blockedId}`, {
            method: 'DELETE'
          }) : null
        }).filter(Boolean)

        await Promise.all(unblockRequests)
      }

      setSelectedTimesToBlock([])
      setIsSelectingTimesForBlock(false)
      fetchBlockedTimes()

      const message = []
      if (timesToBlock.length > 0) message.push(`تم إقفال ${timesToBlock.length} وقت`)
      if (timesToUnblock.length > 0) message.push(`تم فتح ${timesToUnblock.length} وقت`)
      alert(message.join(' و ') + '!')
    } catch (error) {
      alert('خطأ في معالجة الأوقات')
    }
  }

  const unblockDay = async (dateString: string) => {
    try {
      const blockedDay = blockedTimes.find(blocked =>
        blocked.date === dateString &&
        blocked.startTime === null
      )

      if (blockedDay) {
        await fetch(`/api/admin/blocked-times/${blockedDay.id}`, {
          method: 'DELETE'
        })

        fetchBlockedTimes()
        alert('تم فتح اليوم بنجاح!')
      }
    } catch (error) {
      alert('خطأ في فتح اليوم')
    }
  }

  const unblockTime = async (dateString: string, timeString: string) => {
    try {
      const blockedTime = blockedTimes.find(blocked =>
        blocked.date === dateString &&
        blocked.startTime === timeString
      )

      if (blockedTime) {
        await fetch(`/api/admin/blocked-times/${blockedTime.id}`, {
          method: 'DELETE'
        })

        fetchBlockedTimes()
        alert('تم فتح الوقت بنجاح!')
      }
    } catch (error) {
      alert('خطأ في فتح الوقت')
    }
  }

  // دوال إدارة الحجز الجديد
  const openNewBooking = () => {
    setNewBookingData({
      customerName: '',
      customerPhone: '',
      selectedDate: selectedDate || '',
      selectedTime: '',
      selectedServices: [],
      notes: ''
    })
    setIsCreatingBooking(true)
  }

  const saveNewBooking = async () => {
    if (!newBookingData.customerName || !newBookingData.customerPhone ||
        !newBookingData.selectedDate || !newBookingData.selectedTime ||
        newBookingData.selectedServices.length === 0) {
      alert('يرجى إكمال جميع البيانات المطلوبة')
      return
    }

    try {
      const response = await fetch('/api/admin/bookings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          customerName: newBookingData.customerName,
          phoneNumber: newBookingData.customerPhone,
          selectedDate: newBookingData.selectedDate,
          selectedTime: newBookingData.selectedTime,
          selectedServices: newBookingData.selectedServices,
          notes: newBookingData.notes,
          createdBy: 'admin'
        }),
      })

      const data = await response.json()

      if (data.success) {
        setIsCreatingBooking(false)
        fetchBookings()
        alert('تم إنشاء الحجز بنجاح!')
      } else {
        alert('فشل في إنشاء الحجز: ' + data.error)
      }
    } catch (error) {
      alert('خطأ في الاتصال بالخادم')
    }
  }

  const toggleNewBookingService = (serviceId: string) => {
    setNewBookingData(prev => ({
      ...prev,
      selectedServices: prev.selectedServices.includes(serviceId)
        ? prev.selectedServices.filter(id => id !== serviceId)
        : [...prev.selectedServices, serviceId]
    }))
  }

  const getDaysInMonth = (date: Date) => {
    const year = date.getFullYear()
    const month = date.getMonth()
    const firstDay = new Date(year, month, 1)
    const lastDay = new Date(year, month + 1, 0)
    const daysInMonth = lastDay.getDate()
    const startingDayOfWeek = firstDay.getDay()

    const days = []

    for (let i = 0; i < startingDayOfWeek; i++) {
      days.push(null)
    }

    for (let day = 1; day <= daysInMonth; day++) {
      days.push(new Date(year, month, day))
    }

    return days
  }
 {/* عرض التقويم حسب النوع المختار */}
{currentView === 'month' && (
  // التقويم الشهري الموجود (احتفظ بالكود الأصلي كما هو)
  <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
    {/* الكود الأصلي للتقويم الشهري هنا */}
  </div>
)}

{currentView === 'week' && renderWeekView()}

{currentView === 'day' && renderDayView()}
(
  // سنضيف العرض اليومي في الخطوة التالية
  <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
    <p className="text-center text-gray-500">العرض اليومي قيد التطوير...</p>
  </div>
)}

const formatDateString = useCallback((date: Date): string => {
  const year = date.getFullYear()
  const month = (date.getMonth() + 1).toString().padStart(2, '0')
  const day = date.getDate().toString().padStart(2, '0')
  return `${year}-${month}-${day}`
}, [])

const parseDateString = useCallback((dateString: string): Date => {
  return new Date(dateString + 'T00:00:00')
}, [])

const calculateViewDateRange = useCallback((date: Date, view: ViewType): EnhancedDateRange => {
  const year = date.getFullYear()
  const month = date.getMonth()

  switch (view) {
    case 'day':
      const dayStr = formatDateString(date)
      return {
        startDate: dayStr,
        endDate: dayStr,
        view: 'day'
      }
    
    case 'week':
      const startOfWeek = new Date(date)
      startOfWeek.setDate(date.getDate() - date.getDay())
      const endOfWeek = new Date(startOfWeek)
      endOfWeek.setDate(startOfWeek.getDate() + 6)
      
      return {
        startDate: formatDateString(startOfWeek),
        endDate: formatDateString(endOfWeek),
        view: 'week'
      }
    
    case 'month':
    default:
      const startOfMonth = new Date(year, month, 1)
      const endOfMonth = new Date(year, month + 1, 0)
      
      return {
        startDate: formatDateString(startOfMonth),
        endDate: formatDateString(endOfMonth),
        view: 'month'
      }
  }
}, [formatDateString])

const getBookingsForTimeSlot = useCallback((dateString: string, timeString: string) => {
  return bookings.filter(booking => {
    const bookingDate = new Date(booking.date).toISOString().split('T')[0]
    const bookingTime = new Date(booking.startTime).toLocaleTimeString('en-GB', {
      hour12: false,
      hour: '2-digit',
      minute: '2-digit'
    })
    return bookingDate === dateString && bookingTime === timeString
  })
}, [bookings])

const formatViewTimeRange = useCallback(() => {
  const start = parseDateString(currentDateRange.startDate)
  const end = parseDateString(currentDateRange.endDate)
  
  if (currentView === 'day') {
    return start.toLocaleDateString('ar-SA', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    })
  } else if (currentView === 'week') {
    return `${start.getDate()} - ${end.getDate()} ${monthNames[start.getMonth()]} ${start.getFullYear()}`
  } else {
    return `${monthNames[start.getMonth()]} ${start.getFullYear()}`
  }
}, [currentDateRange, currentView, monthNames, parseDateString])


   const navigateMonth = (direction: 'prev' | 'next') => {
    setCurrentMonth(prev => {
      const newDate = new Date(prev)
      newDate.setMonth(prev.getMonth() + (direction === 'prev' ? -1 : 1))

      const year = newDate.getFullYear()
      const month = newDate.getMonth()
      const newRange = {
        startDate: `${year}-${(month + 1).toString().padStart(2,'0')}-01`,
        endDate: new Date(year, month + 1, 0).toISOString().split('T')[0],
        view: 'month' as const
      }

      setCurrentDateRange(newRange)
      return newDate
    })
  }


// ——— تغيير الشهر من القائمة المنسدلة ———
  const changeMonth = (monthIndex: number) => {
    const year = currentMonth.getFullYear()
    const newDate = new Date(year, monthIndex, 1)
    setCurrentMonth(newDate)

    const startDate = `${year}-${(monthIndex + 1).toString().padStart(2,'0')}-01`
    const endDate   = new Date(year, monthIndex + 1, 0).toISOString().split('T')[0]
    setCurrentDateRange({ startDate, endDate, view: 'month' })
  }



   const changeYear = (yearValue: number) => {
    const month = currentMonth.getMonth()
    const newDate = new Date(yearValue, month, 1)
    setCurrentMonth(newDate)

    const startDate = `${yearValue}-${(month + 1).toString().padStart(2,'0')}-01`
    const endDate   = new Date(yearValue, month + 1, 0).toISOString().split('T')[0]
    setCurrentDateRange({ startDate, endDate, view: 'month' })
  }



  const getBookingsForDate = (date: Date) => {
    const year = date.getFullYear()
    const month = date.getMonth()
    const day = date.getDate()
    const dateString = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`

    return bookings.filter(booking => {
      const bookingDateTime = fromDatabaseTime(booking.date)
      const bookingDateString = formatIstanbulDate(bookingDateTime, 'date')
      return bookingDateString === dateString
    })
  }

  const selectDate = (date: Date) => {
    const year = date.getFullYear()
    const month = date.getMonth()
    const day = date.getDate()
    const dateString = `${year}-${(month + 1).toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`

    setSelectedDate(dateString)

    const dayBookings = getBookingsForDate(date)
    setSelectedDayBookings(dayBookings)
  }
const changeView = useCallback((newView: ViewType) => {
  setCurrentView(newView)
  const newRange = calculateViewDateRange(enhancedCurrentDate, newView)
  setCurrentDateRange(newRange)
}, [enhancedCurrentDate, calculateViewDateRange])

const navigateViewDate = useCallback((direction: 'prev' | 'next') => {
  const newDate = new Date(enhancedCurrentDate)
  
  switch (currentView) {
    case 'day':
      newDate.setDate(enhancedCurrentDate.getDate() + (direction === 'next' ? 1 : -1))
      break
    case 'week':
      newDate.setDate(enhancedCurrentDate.getDate() + (direction === 'next' ? 7 : -7))
      break
    case 'month':
      newDate.setMonth(enhancedCurrentDate.getMonth() + (direction === 'next' ? 1 : -1))
      break
  }
  
  setEnhancedCurrentDate(newDate)
  const newRange = calculateViewDateRange(newDate, currentView)
  setCurrentDateRange(newRange)
}, [enhancedCurrentDate, currentView, calculateViewDateRange])

  const copyPhoneNumber = (phone: string) => {
    navigator.clipboard.writeText(phone)
    setShowPhoneMenu(null)
  }

  const openWhatsApp = (phone: string, customerName: string) => {
    const cleanPhone = phone.replace(/[^\d+]/g, '')
    const message = `مرحباً ${customerName}، بخصوص موعدك في صالون ريم...`
    const whatsappUrl = `https://wa.me/${cleanPhone}?text=${encodeURIComponent(message)}`
    window.open(whatsappUrl, '_blank')
    setShowPhoneMenu(null)
  }

  const makeCall = (phone: string) => {
    window.open(`tel:${phone}`, '_self')
    setShowPhoneMenu(null)
  }

  const handleLogout = () => {
    localStorage.removeItem('adminToken')
    router.push('/admin/login')
  }

  const openEditBooking = (booking: Booking) => {
    setEditingBooking(booking)

    const bookingDateTime = fromDatabaseTime(booking.date)
    const startDateTime = fromDatabaseTime(booking.startTime)

    const dateString = formatIstanbulDate(bookingDateTime, 'date')
    const timeString = formatIstanbulDate(startDateTime, 'time')

    setEditData({
      customerName: booking.customerName,
      customerPhone: booking.customerPhone,
      selectedDate: dateString,
      selectedTime: timeString,
      selectedServices: booking.services,
      notes: ''
    })
  }

  const openDeleteBooking = (booking: Booking) => {
    setDeletingBooking(booking)
    setDeleteReason('')
  }

  const toggleService = (serviceId: string) => {
    setEditData(prev => ({
      ...prev,
      selectedServices: prev.selectedServices.includes(serviceId)
        ? prev.selectedServices.filter(id => id !== serviceId)
        : [...prev.selectedServices, serviceId]
    }))
  }

  const saveBookingChanges = async () => {
    if (!editingBooking) return

    if (editData.selectedServices.length === 0) {
      alert('يرجى اختيار خدمة واحدة على الأقل')
      return
    }

    try {
      const response = await fetch(`/api/admin/bookings/${editingBooking.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          customerName: editData.customerName,
          customerPhone: editData.customerPhone,
          selectedDate: editData.selectedDate,
          selectedTime: editData.selectedTime,
          selectedServices: editData.selectedServices,
          notes: editData.notes
        })
      })

      const data = await response.json()

      if (data.success) {
        setEditingBooking(null)
        fetchBookings()
        alert('تم تحديث الحجز بنجاح!')
      } else {
        alert('فشل في تحديث الحجز: ' + data.error)
      }
    } catch (error) {
      alert('خطأ في الاتصال بالخادم')
    }
  }

  const deleteBooking = async () => {
    if (!deletingBooking || !deleteReason.trim()) {
      alert('يرجى إدخال سبب الحذف')
      return
    }

    try {
      const response = await fetch(`/api/admin/bookings/${deletingBooking.id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          reason: deleteReason
        })
      })

      const data = await response.json()

      if (data.success) {
        setDeletingBooking(null)
        setDeleteReason('')
        fetchBookings()
        alert('تم حذف الحجز بنجاح!')
      } else {
        alert('فشل في حذف الحجز: ' + data.error)
      }
    } catch (error) {
      alert('خطأ في الاتصال بالخادم')
    }
  }

  const formatArabicDateDisplay = (dateString: string) => {
    const dateObj = fromDatabaseTime(dateString)
    return formatArabicDate(dateObj)
  }

  const getSelectedDaysAction = () => {
    const blockedCount = selectedDaysToBlock.filter(date => isDayBlocked(date)).length
    const unlockedCount = selectedDaysToBlock.filter(date => !isDayBlocked(date)).length

    if (blockedCount > 0 && unlockedCount > 0) {
      return { type: 'mixed', text: `معالجة المحدد (${blockedCount} فتح + ${unlockedCount} إقفال)`, icon: Shield }
    } else if (blockedCount > 0) {
      return { type: 'unlock', text: `🔓 فتح المحدد (${blockedCount})`, icon: Unlock }
    } else {
      return { type: 'lock', text: `🔒 إقفال المحدد (${unlockedCount})`, icon: Lock }
    }
  }

  const getSelectedTimesAction = () => {
    const blockedCount = selectedTimesToBlock.filter(time => isTimeBlocked(selectedDate, time)).length
    const unlockedCount = selectedTimesToBlock.filter(time => !isTimeBlocked(selectedDate, time)).length

    if (blockedCount > 0 && unlockedCount > 0) {
      return { type: 'mixed', text: `معالجة المحدد (${blockedCount} فتح + ${unlockedCount} إقفال)`, icon: Shield }
    } else if (blockedCount > 0) {
      return { type: 'unlock', text: `🔓 فتح المحدد (${blockedCount})`, icon: Unlock }
    } else {
      return { type: 'lock', text: `🔒 إقفال المحدد (${unlockedCount})`, icon: Lock }
    }
  }

  const days = getDaysInMonth(currentMonth)
  const today = new Date()
  const todayString = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`
const renderWeekView = () => {
  const startDate = parseDateString(currentDateRange.startDate)
const renderWeekView = () => {
  const startDate = parseDateString(currentDateRange.startDate)
  const weekDays = []
  
  for (let i = 0; i < 7; i++) {
    const day = new Date(startDate)
    day.setDate(startDate.getDate() + i)
    weekDays.push(day)
  }
const renderDayView = () => {
  const displayDate = selectedDate || formatDateString(enhancedCurrentDate)
  const dayBookings = getBookingsForDate(displayDate)
  
  // تجميع الحجوزات حسب الوقت
  const timeSlotBookings = {}
  adminTimeSlots.forEach(time => {
    timeSlotBookings[time] = getBookingsForTimeSlot(displayDate, time)
  })

  return (
    <div className="bg-white rounded-xl shadow-lg p-4">
      {/* هيدر اليوم */}
      <div className="mb-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl border border-blue-200">
        <h3 className="text-xl font-bold text-gray-800 mb-2 flex items-center">
          <Calendar className="w-6 h-6 ml-2 text-blue-600" />
          {parseDateString(displayDate).toLocaleDateString('ar-SA', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}
        </h3>
        
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center space-x-4 rtl:space-x-reverse">
            <div className="flex items-center space-x-2 rtl:space-x-reverse">
              <User className="w-4 h-4 text-green-600" />
              <span className="text-green-700 font-medium">
                {dayBookings.length} {dayBookings.length === 1 ? 'موعد' : 'مواعيد'}
              </span>
            </div>
            
            <div className="flex items-center space-x-2 rtl:space-x-reverse">
              <Clock className="w-4 h-4 text-purple-600" />
              <span className="text-purple-700 font-medium">
                {adminTimeSlots.length - dayBookings.length} وقت متاح
              </span>
            </div>
          </div>
          
          <button
            onClick={openNewBooking}
            className="flex items-center space-x-2 rtl:space-x-reverse bg-green-600 text-white px-3 py-1 rounded-lg hover:bg-green-700 transition-colors text-sm"
          >
            <Plus className="w-4 h-4" />
            <span>حجز جديد</span>
          </button>
        </div>
      </div>

      {/* جدول الأوقات التفصيلي */}
      <div className="space-y-2">
        {adminTimeSlots.map((time) => {
          const timeBookings = timeSlotBookings[time] || []
          const isEmpty = timeBookings.length === 0
          
          return (
            <div
              key={time}
              className={`
                relative flex items-start p-4 border rounded-xl transition-all duration-200
                ${isEmpty 
                  ? 'border-gray-200 hover:border-gray-300 bg-white hover:bg-gray-50' 
                  : 'border-blue-200 bg-gradient-to-r from-blue-50 to-purple-50'
                }
              `}
            >
              {/* عمود الوقت */}
              <div className="w-20 flex-shrink-0">
                <div className="text-lg font-bold text-gray-700 mb-1">
                  {time}
                </div>
                <div className={`text-xs px-2 py-1 rounded-full text-center ${
                  isEmpty 
                    ? 'bg-green-100 text-green-700' 
                    : 'bg-blue-100 text-blue-700'
                }`}>
                  {isEmpty ? 'متاح' : 'محجوز'}
                </div>
              </div>

              {/* محتوى الحجوزات */}
              <div className="flex-1 ml-4">
                {isEmpty ? (
                  <div 
                    className="text-center py-8 text-gray-400 cursor-pointer hover:text-gray-600 transition-colors"
                    onClick={() => {
                      setNewBookingData(prev => ({
                        ...prev,
                        selectedDate: displayDate,
                        selectedTime: time
                      }))
                      openNewBooking()
                    }}
                  >
                    <Plus className="w-8 h-8 mx-auto mb-2" />
                    <p>انقر لإضافة حجز في هذا الوقت</p>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {timeBookings.map((booking) => (
                      <div
                        key={booking.id}
                        className="bg-white border border-blue-200 rounded-lg p-4 cursor-pointer hover:shadow-md transition-all duration-200 hover:border-blue-300"
                        onClick={() => openEditBooking(booking)}
                      >
                        {/* معلومات العميلة */}
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center space-x-3 rtl:space-x-reverse">
                            <div className="w-10 h-10 bg-gradient-to-r from-pink-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold">
                              {booking.customerName.charAt(0)}
                            </div>
                            <div>
                              <div className="font-bold text-gray-800 text-lg">
                                {booking.customerName}
                              </div>
                              <div className="flex items-center text-sm text-gray-600">
                                <Phone className="w-3 h-3 ml-1 text-gray-400" />
                                {booking.customerPhone}
                              </div>
                            </div>
                          </div>
                          
                          <div className="flex items-center space-x-2 rtl:space-x-reverse">
                            <button
                              onClick={(e) => {
                                e.stopPropagation()
                                openEditBooking(booking)
                              }}
                              className="p-2 text-blue-600 hover:bg-blue-100 rounded-lg transition-colors"
                              title="تعديل الحجز"
                            >
                              <Edit className="w-4 h-4" />
                            </button>
                            <button
                              onClick={(e) => {
                                e.stopPropagation()
                                openDeleteBooking(booking)
                              }}
                              className="p-2 text-red-600 hover:bg-red-100 rounded-lg transition-colors"
                              title="حذف الحجز"
                            >
                              <Trash2 className="w-4 h-4" />
                            </button>
                          </div>
                        </div>
                        
                        {/* الخدمات */}
                        <div className="mb-3">
                          <div className="flex items-center mb-2">
                            <Sparkles className="w-4 h-4 ml-2 text-purple-500" />
                            <span className="font-medium text-gray-700">
                              الخدمات ({booking.services.length})
                            </span>
                          </div>
                          
                          <div className="flex flex-wrap gap-2">
                            {booking.services.map((serviceId, index) => (
                              <span
                                key={`${serviceId}-${index}`}
                                className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${getServiceColor(serviceId)}`}
                              >
                                {services[serviceId] || `خدمة ${serviceId}`}
                              </span>
                            ))}
                          </div>
                        </div>
                        
                        {/* معلومات إضافية */}
                        <div className="flex items-center justify-between text-xs text-gray-500 border-t pt-2">
                          <div className="flex items-center space-x-2 rtl:space-x-reverse">
                            <span>الحالة:</span>
                            <span className={`px-2 py-1 rounded-full ${
                              booking.status === 'confirmed' ? 'bg-green-100 text-green-700' :
                              booking.status === 'completed' ? 'bg-blue-100 text-blue-700' :
                              'bg-red-100 text-red-700'
                            }`}>
                              {booking.status === 'confirmed' ? 'مؤكد' :
                               booking.status === 'completed' ? 'مكتمل' : 'ملغي'}
                            </span>
                          </div>
                          
                          <div className="flex items-center space-x-4 rtl:space-x-reverse">
                            <button
                              onClick={(e) => {
                                e.stopPropagation()
                                makeCall(booking.customerPhone)
                              }}
                              className="flex items-center space-x-1 rtl:space-x-reverse text-green-600 hover:text-green-800"
                            >
                              <Phone className="w-3 h-3" />
                              <span>اتصال</span>
                            </button>
                            
                            <button
                              onClick={(e) => {
                                e.stopPropagation()
                                openWhatsApp(booking.customerPhone, booking.customerName)
                              }}
                              className="flex items-center space-x-1 rtl:space-x-reverse text-green-600 hover:text-green-800"
                            >
                              <MessageCircle className="w-3 h-3" />
                              <span>واتساب</span>
                            </button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          )
        })}
      </div>
      
      {/* إحصائيات اليوم */}
      <div className="mt-6 p-4 bg-gray-50 rounded-xl">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
          <div>
            <div className="text-2xl font-bold text-blue-600">{dayBookings.length}</div>
            <div className="text-xs text-gray-600">مواعيد</div>
          </div>
          <div>
            <div className="text-2xl font-bold text-green-600">
              {adminTimeSlots.length - dayBookings.length}
            </div>
            <div className="text-xs text-gray-600">أوقات متاحة</div>
          </div>
          <div>
            <div className="text-2xl font-bold text-purple-600">
              {dayBookings.reduce((total, booking) => total + booking.services.length, 0)}
            </div>
            <div className="text-xs text-gray-600">خدمات</div>
          </div>
          <div>
            <div className="text-2xl font-bold text-orange-600">
              {((dayBookings.length / adminTimeSlots.length) * 100).toFixed(0)}%
            </div>
            <div className="text-xs text-gray-600">الإشغال</div>
          </div>
        </div>
      </div>
    </div>
  )
}

  return (
    <div className="bg-white rounded-xl shadow-lg p-4">
      <div className="overflow-x-auto">
        <div className="grid grid-cols-8 gap-1 text-xs min-w-[600px]">
          {/* عمود الأوقات */}
          <div className="font-semibold text-gray-600 sticky left-0 bg-white z-10"></div>
          
          {weekDays.map((day, index) => {
            const isToday = formatDateString(day) === formatDateString(new Date())
            return (
              <div key={index} className="text-center font-semibold text-gray-600 py-2 min-w-[80px]">
                <div className={`${isToday ? 'text-blue-600' : ''}`}>
                  {dayNamesShort[day.getDay()]}
                </div>
                <div className={`text-lg font-bold ${isToday ? 'text-blue-600' : ''}`}>
                  {day.getDate()}
                </div>
              </div>
            )
          })}
          
          {/* الأوقات والحجوزات */}
          {adminTimeSlots.map((time) => (
            <React.Fragment key={time}>
              <div className="text-right font-medium text-gray-500 py-1 text-xs sticky left-0 bg-white z-10 border-r border-gray-200 pr-2">
                {time}
              </div>
              {weekDays.map((day, dayIndex) => {
                const dayString = formatDateString(day)
                const timeBookings = getBookingsForTimeSlot(dayString, time)
                const isToday = formatDateString(day) === formatDateString(new Date())
                
                return (
                  <div
                    key={`${dayString}-${time}`}
                    className={`border border-gray-100 p-1 min-h-[40px] cursor-pointer hover:bg-blue-50 transition-colors min-w-[80px] ${
                      isToday ? 'bg-blue-50' : ''
                    }`}
                    onClick={() => {
                      setSelectedDate(dayString)
                      setEnhancedCurrentDate(day)
                      changeView('day')
                    }}
                  >
                    {timeBookings.map((booking, bookingIndex) => (
                      <div
                        key={`${booking.id}-${bookingIndex}`}
                        className="bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs p-1 rounded mb-1 truncate cursor-pointer hover:shadow-md transition-shadow"
                        title={`${booking.customerName} - ${services[booking.services[0]] || 'خدمة'}`}
                        onClick={(e) => {
                          e.stopPropagation()
                          openEditBooking(booking)
                        }}
                      >
                        <div className="font-medium truncate">
                          {booking.customerName.split(' ')[0]}
                        </div>
                        <div className="text-xs opacity-90 truncate">
                          {services[booking.services[0]]?.substring(0, 8) || 'خدمة'}
                        </div>
                      </div>
                    ))}
                  </div>
                )
              })}
            </React.Fragment>
          ))}
        </div>
      </div>
      
      {/* معلومات إضافية للأسبوع */}
      <div className="mt-4 p-3 bg-gray-50 rounded-lg">
        <div className="flex items-center justify-between text-sm text-gray-600">
          <div className="flex items-center space-x-2 rtl:space-x-reverse">
            <Calendar className="w-4 h-4" />
            <span>إجمالي الحجوزات هذا الأسبوع: {bookings.length}</span>
          </div>
          <div className="text-xs text-gray-500">
            💡 انقر على اليوم للتفاصيل الكاملة
          </div>
        </div>
      </div>
    </div>
  )
}
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-gradient-to-r from-pink-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
            <Calendar className="w-8 h-8 text-white" />
          </div>
          <p className="text-gray-600">جاري تحميل الحجوزات...</p>
        </div>
      </div>
    )
  }

  const selectedDaysAction = getSelectedDaysAction()
  const selectedTimesAction = getSelectedTimesAction()

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50">
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4 rtl:space-x-reverse">
              <Link href="/admin" className="flex items-center text-purple-600 hover:text-purple-800">
                <ArrowLeft className="w-5 h-5 ml-2" />
                العودة للوحة التحكم
              </Link>
            </div>

            <div className="flex items-center space-x-4 rtl:space-x-reverse">
              <h1 className="text-xl font-bold text-gray-800">إدارة الحجوزات</h1>
              <Calendar className="w-6 h-6 text-purple-600" />
            </div>

            <button
              onClick={handleLogout}
              className="flex items-center space-x-2 rtl:space-x-reverse text-red-600 hover:text-red-800 transition-colors duration-300"
            >
              <LogOut className="w-4 h-4" />
              <span>خروج</span>
            </button>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 py-8">
        {error && (
          <div className="mb-8 bg-red-50 border border-red-200 rounded-xl p-4">
            <div className="flex items-center">
              <X className="w-5 h-5 text-red-500 ml-2" />
              <p className="text-red-700">{error}</p>
            </div>
          </div>
        )}

        <div className="bg-white rounded-xl shadow-lg p-4 mb-4">
          <div className="flex items-center justify-center space-x-4 rtl:space-x-reverse">
            {!isSelectingDaysForBlock ? (
              <button
                onClick={() => {
                  setIsSelectingDaysForBlock(true)
                  setSelectedDaysToBlock([])
                }}
                className="flex items-center space-x-2 rtl:space-x-reverse bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700 transition-colors"
              >
                <Shield className="w-4 h-4" />
                <span>📅 تحديد أيام للإقفال/الفتح</span>
              </button>
            ) : (
              <div className="flex items-center space-x-3 rtl:space-x-reverse">
                <div className="flex items-center space-x-2 rtl:space-x-reverse bg-orange-100 px-3 py-2 rounded-lg">
                  <Shield className="w-4 h-4 text-orange-600" />
                  <span className="text-orange-800 font-medium">وضع تحديد الأيام مُفعل</span>
                </div>
                <button
                  onClick={processSelectedDays}
                  disabled={selectedDaysToBlock.length === 0}
                  className={`flex items-center space-x-2 rtl:space-x-reverse text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50 ${
                    selectedDaysAction.type === 'unlock' ? 'bg-green-600 hover:bg-green-700' :
                    selectedDaysAction.type === 'lock' ? 'bg-red-600 hover:bg-red-700' :
                    'bg-blue-600 hover:bg-blue-700'
                  }`}
                >
                  <selectedDaysAction.icon className="w-4 h-4" />
                  <span>{selectedDaysAction.text}</span>
                </button>
                <button
                  onClick={() => {
                    setIsSelectingDaysForBlock(false)
                    setSelectedDaysToBlock([])
                  }}
                  className="flex items-center space-x-2 rtl:space-x-reverse bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors"
                >
                  <X className="w-4 h-4" />
                  <span>إلغاء</span>
                </button>
              </div>
            )}
          </div>
        </div>

<div className="bg-white rounded-xl shadow-lg p-4 mb-6">
  {/* أزرار التنقل والعنوان */}
  <div className="flex items-center justify-between mb-4">
    <button
      onClick={() => currentView === 'month' ? navigateMonth('prev') : navigateViewDate('prev')}
      className="p-2 rounded-lg bg-purple-100 text-purple-600 hover:bg-purple-200 transition-colors"
    >
      <ChevronRight className="w-5 h-5" />
    </button>

    <h2 className="text-lg font-bold text-gray-800 text-center px-4">
      {currentView === 'month' ? 
        // العرض الشهري التقليدي
        <div className="flex items-center space-x-4 rtl:space-x-reverse">
          <select
            value={currentMonth.getFullYear()}
            onChange={(e) => changeYear(parseInt(e.target.value))}
            className="px-3 py-2 border border-gray-300 rounded-lg bg-white focus:ring-2 focus:ring-purple-500 focus:border-transparent font-bold text-gray-800"
          >
            {availableYears.map(yearOption => (
              <option key={yearOption} value={yearOption}>{yearOption}</option>
            ))}
          </select>

          <select
            value={currentMonth.getMonth()}
            onChange={(e) => changeMonth(parseInt(e.target.value))}
            className="px-3 py-2 border border-gray-300 rounded-lg bg-white focus:ring-2 focus:ring-purple-500 focus:border-transparent font-bold text-gray-800"
          >
            {monthNames.map((monthName, index) => (
              <option key={index} value={index}>{monthName}</option>
            ))}
          </select>
        </div>
        :
        // العروض الجديدة
        formatViewTimeRange()
      }
    </h2>

    <button
      onClick={() => currentView === 'month' ? navigateMonth('next') : navigateViewDate('next')}
      className="p-2 rounded-lg bg-purple-100 text-purple-600 hover:bg-purple-200 transition-colors"
    >
      <ChevronLeft className="w-5 h-5" />
    </button>
  </div>

  {/* أزرار التبديل الجديدة */}
  <div className="flex items-center justify-center gap-2">
    <button
      onClick={() => changeView('month')}
      className={`flex items-center space-x-2 rtl:space-x-reverse px-4 py-2 rounded-lg transition-colors text-sm ${
        currentView === 'month'
          ? 'bg-blue-600 text-white'
          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
      }`}
    >
      <Grid3X3 className="w-4 h-4" />
      <span>شهري</span>
    </button>

    <button
      onClick={() => changeView('week')}
      className={`flex items-center space-x-2 rtl:space-x-reverse px-4 py-2 rounded-lg transition-colors text-sm ${
        currentView === 'week'
          ? 'bg-blue-600 text-white'
          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
      }`}
    >
      <Calendar className="w-4 h-4" />
      <span>أسبوعي</span>
    </button>

    <button
      onClick={() => changeView('day')}
      className={`flex items-center space-x-2 rtl:space-x-reverse px-4 py-2 rounded-lg transition-colors text-sm ${
        currentView === 'day'
          ? 'bg-blue-600 text-white'
          : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
      }`}
    >
      <List className="w-4 h-4" />
      <span>يومي</span>
    </button>
  </div>
</div>

            <button
              onClick={() => navigateMonth('next')}
              className="p-2 rounded-lg bg-purple-100 text-purple-600 hover:bg-purple-200 transition-colors"
            >
              <ChevronLeft className="w-5 h-5" />
            </button>
          </div>

          <div className="grid grid-cols-7 gap-2 mb-4">
            {dayNames.map((day, index) => (
              <div key={index} className="text-center font-semibold text-gray-600 py-2">
                {day}
              </div>
            ))}
          </div>

          <div className="grid grid-cols-7 gap-2">
            {days.map((day, index) => {
              if (!day) {
                return <div key={`empty-${index}`} className="h-24"></div>
              }

              const yearDay = day.getFullYear()
              const monthDay = day.getMonth()
              const dayNum = day.getDate()
              const dayString = `${yearDay}-${(monthDay + 1).toString().padStart(2, '0')}-${dayNum.toString().padStart(2, '0')}`

              const dayBookings = getBookingsForDate(day)
              const isToday = dayString === todayString
              const isSelected = dayString === selectedDate
              const isPast = day < new Date(todayString)
              const dayBlocked = isDayBlocked(dayString)
              const isSelectedForBlock = selectedDaysToBlock.includes(dayString)

              return (
                <div
                  key={`day-${yearDay}-${monthDay}-${dayNum}`}
                  onClick={() => {
                    if (isSelectingDaysForBlock) {
                      toggleDaySelection(dayString)
                    } else {
                      selectDate(day)
                    }
                  }}
                  className={`
                    h-24 border rounded-lg p-2 cursor-pointer transition-all duration-200 relative
                    ${isSelected && !isSelectingDaysForBlock ? 'border-purple-500 bg-purple-50' : 'border-gray-200 hover:border-purple-300'}
                    ${isToday ? 'ring-2 ring-blue-400' : ''}
                    ${isPast ? 'bg-gray-50' : 'bg-white hover:bg-purple-25'}
                    ${dayBlocked ? 'bg-red-100 border-red-300' : ''}
                    ${isSelectedForBlock ? 'bg-orange-200 border-orange-400' : ''}
                  `}
                >
                  {isSelectingDaysForBlock && !isPast && (
                    <div className="absolute top-1 right-1">
                      <div className={`w-4 h-4 rounded-sm border-2 flex items-center justify-center ${
                        isSelectedForBlock ? 'bg-orange-500 border-orange-500' : 'border-gray-400 bg-white'
                      }`}>
                        {isSelectedForBlock && <Check className="w-3 h-3 text-white" />}
                      </div>
                    </div>
                  )}

                  {dayBlocked && !isSelectingDaysForBlock && (
                    <div className="absolute top-1 right-1">
                      <button
                        onClick={(e) => {
                          e.stopPropagation()
                          unblockDay(dayString)
                        }}
                        className="w-5 h-5 bg-red-500 rounded-sm flex items-center justify-center hover:bg-red-600 transition-colors"
                        title="إلغاء الإقفال"
                      >
                        <Lock className="w-3 h-3 text-white" />
                      </button>
                    </div>
                  )}

                  <div className={`text-sm font-medium ${
                    isToday ? 'text-blue-600' :
                    isPast ? 'text-gray-400' :
                    dayBlocked ? 'text-red-600' :
                    'text-gray-700'
                  }`}>
                    {dayNum}
                  </div>

                  {dayBookings.length > 0 && (
                    <div className="mt-1 space-y-1">
                      {dayBookings.slice(0, 2).map((booking, bookingIndex) => {
                        const firstServiceId = booking.services[0]
                        const serviceColor = getServiceColor(firstServiceId)
                        const startDateTime = fromDatabaseTime(booking.startTime)
                        const timeString = formatIstanbulDate(startDateTime, 'time')

                        return (
                          <div
                            key={`booking-${booking.id}-${bookingIndex}`}
                            className={`text-xs px-1 py-0.5 rounded truncate ${serviceColor}`}
                          >
                            {timeString}
                          </div>
                        )
                      })}
                      {dayBookings.length > 2 && (
                        <div className="text-xs text-gray-500">
                          +{dayBookings.length - 2} أخرى
                        </div>
                      )}
                    </div>
                  )}

                  {dayBlocked && (
                    <div className="mt-1 text-xs text-red-600 font-medium">
                      🔒 مقفل
                    </div>
                  )}
                </div>
              )
            })}
          </div>
        </div>
        
      </div>

      {/* نافذة إنشاء حجز جديد */}
      {isCreatingBooking && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-bold text-gray-800 flex items-center">
                <Plus className="w-5 h-5 ml-2 text-green-600" />
                إنشاء حجز جديد
              </h3>
              <button
                onClick={() => setIsCreatingBooking(false)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">اسم العميلة</label>
                  <input
                    type="text"
                    value={newBookingData.customerName}
                    onChange={(e) => setNewBookingData({ ...newBookingData, customerName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="أدخل اسم العميلة"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">رقم الهاتف</label>
                  <input
                    type="text"
                    value={newBookingData.customerPhone}
                    onChange={(e) => setNewBookingData({ ...newBookingData, customerPhone: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="+90 5XX XXX XX XX"
                    dir="ltr"
                  />
                </div>
              </div>

              <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                <h4 className="font-medium text-green-800 mb-3">اختيار التاريخ والوقت</h4>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      التاريخ - {newBookingData.selectedDate ? formatArabicDateDisplay(newBookingData.selectedDate) : ''}
                    </label>
                    <input
                      type="date"
                      value={newBookingData.selectedDate}
                      onChange={(e) => setNewBookingData({ ...newBookingData, selectedDate: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">الوقت</label>
                    <select
                      value={newBookingData.selectedTime}
                      onChange={(e) => setNewBookingData({ ...newBookingData, selectedTime: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    >
                      <option value="">اختر الوقت</option>
                      {adminTimeSlots.map((time) => (
                        <option key={time} value={time}>
                          {time}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                <div className="mt-3 text-xs text-green-600">
                  💡 الأدمن يستطيع الحجز في أي وقت حتى لو كان محجوز أو مقفل
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  الخدمات المطلوبة ({newBookingData.selectedServices.length} خدمة مختارة)
                </label>

                <div className="bg-gray-50 p-4 rounded-lg border max-h-60 overflow-y-auto">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {allServices.map((service) => (
                      <div
                        key={service.id}
                        className={`flex items-center p-3 rounded-lg border cursor-pointer transition-all ${
                          newBookingData.selectedServices.includes(service.id)
                            ? 'border-purple-300 bg-purple-50'
                            : 'border-gray-200 bg-white hover:border-purple-200'
                        }`}
                        onClick={() => toggleNewBookingService(service.id)}
                      >
                        <div className="flex items-center">
                          <div className={`w-5 h-5 rounded border-2 flex items-center justify-center mr-3 ${
                            newBookingData.selectedServices.includes(service.id)
                              ? 'border-purple-500 bg-purple-500'
                              : 'border-gray-300'
                          }`}>
                            {newBookingData.selectedServices.includes(service.id) && (
                              <Check className="w-3 h-3 text-white" />
                            )}
                          </div>

                          <div className="flex-1">
                            <div className="font-medium text-gray-800">
                              {service.nameAr}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  {newBookingData.selectedServices.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <Sparkles className="w-12 h-12 mx-auto mb-2 text-gray-300" />
                      <p>لم يتم اختيار أي خدمة</p>
                      <p className="text-sm">انقر على الخدمات لاختيارها</p>
                    </div>
                  )}
                </div>

                {newBookingData.selectedServices.length > 0 && (
                  <div className="mt-3 p-3 bg-purple-50 rounded-lg border border-purple-200">
                    <div className="text-sm font-medium text-purple-800 mb-2">الخدمات المختارة:</div>
                    <div className="flex flex-wrap gap-2">
                      {newBookingData.selectedServices.map((serviceId, serviceIndex) => {
                        const service = allServices.find(s => s.id === serviceId)
                        const serviceColor = getServiceColor(serviceId)

                        return (
                          <span
                            key={`new-selected-service-${serviceId}-${serviceIndex}`}
                            className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${serviceColor}`}
                          >
                            <Sparkles className="w-3 h-3 mr-1" />
                            {service?.nameAr || `خدمة ${serviceId}`}
                            <button
                              onClick={() => toggleNewBookingService(serviceId)}
                              className="ml-1 hover:opacity-70"
                            >
                              <X className="w-3 h-3" />
                            </button>
                          </span>
                        )
                      })}
                    </div>
                  </div>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">ملاحظات إضافية</label>
                <textarea
                  value={newBookingData.notes}
                  onChange={(e) => setNewBookingData({ ...newBookingData, notes: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  rows={3}
                  placeholder="ملاحظات إضافية عن الحجز..."
                />
              </div>
            </div>

            <div className="flex items-center justify-end space-x-3 rtl:space-x-reverse mt-6">
              <button
                onClick={() => setIsCreatingBooking(false)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                إلغاء
              </button>
              <button
                onClick={saveNewBooking}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2 rtl:space-x-reverse"
                disabled={newBookingData.selectedServices.length === 0}
              >
                <Save className="w-4 h-4" />
                <span>إنشاء الحجز</span>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* نافذة تعديل الحجز */}
      {editingBooking && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-bold text-gray-800">تعديل الحجز</h3>
              <button
                onClick={() => setEditingBooking(null)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">اسم العميلة</label>
                  <input
                    type="text"
                    value={editData.customerName}
                    onChange={(e) => setEditData({ ...editData, customerName: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">رقم الهاتف</label>
                  <input
                    type="text"
                    value={editData.customerPhone}
                    onChange={(e) => setEditData({ ...editData, customerPhone: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>
              </div>

              <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                <h4 className="font-medium text-purple-800 mb-3">تعديل التاريخ والوقت</h4>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      التاريخ - {formatArabicDateDisplay(editData.selectedDate)}
                    </label>
                    <input
                      type="date"
                      value={editData.selectedDate}
                      onChange={(e) => setEditData({ ...editData, selectedDate: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">الوقت</label>
                    <select
                      value={editData.selectedTime}
                      onChange={(e) => setEditData({ ...editData, selectedTime: e.target.value })}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    >
                      <option value="">اختر الوقت</option>
                      {adminTimeSlots.map((time) => (
                        <option key={time} value={time}>
                          {time}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                <div className="mt-3 text-xs text-purple-600">
                  💡 يمكنك تغيير التاريخ والوقت لنقل الحجز، أو تركهما كما هما للتعديل العادي
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-3">
                  الخدمات المطلوبة ({editData.selectedServices.length} خدمة مختارة)
                </label>

                <div className="bg-gray-50 p-4 rounded-lg border max-h-60 overflow-y-auto">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {allServices.map((service) => (
                      <div
                        key={service.id}
                        className={`flex items-center p-3 rounded-lg border cursor-pointer transition-all ${
                          editData.selectedServices.includes(service.id)
                            ? 'border-purple-300 bg-purple-50'
                            : 'border-gray-200 bg-white hover:border-purple-200'
                        }`}
                        onClick={() => toggleService(service.id)}
                      >
                        <div className="flex items-center">
                          <div className={`w-5 h-5 rounded border-2 flex items-center justify-center mr-3 ${
                            editData.selectedServices.includes(service.id)
                              ? 'border-purple-500 bg-purple-500'
                              : 'border-gray-300'
                          }`}>
                            {editData.selectedServices.includes(service.id) && (
                              <Check className="w-3 h-3 text-white" />
                            )}
                          </div>

                          <div className="flex-1">
                            <div className="font-medium text-gray-800">
                              {service.nameAr}
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  {editData.selectedServices.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <Sparkles className="w-12 h-12 mx-auto mb-2 text-gray-300" />
                      <p>لم يتم اختيار أي خدمة</p>
                      <p className="text-sm">انقر على الخدمات لاختيارها</p>
                    </div>
                  )}
                </div>

                {editData.selectedServices.length > 0 && (
                  <div className="mt-3 p-3 bg-purple-50 rounded-lg border border-purple-200">
                    <div className="text-sm font-medium text-purple-800 mb-2">الخدمات المختارة:</div>
                    <div className="flex flex-wrap gap-2">
                      {editData.selectedServices.map((serviceId, serviceIndex) => {
                        const service = allServices.find(s => s.id === serviceId)
                        const serviceColor = getServiceColor(serviceId)

                        return (
                          <span
                            key={`selected-service-${serviceId}-${serviceIndex}`}
                            className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${serviceColor}`}
                          >
                            <Sparkles className="w-3 h-3 mr-1" />
                            {service?.nameAr || `خدمة ${serviceId}`}
                            <button
                              onClick={() => toggleService(serviceId)}
                              className="ml-1 hover:opacity-70"
                            >
                              <X className="w-3 h-3" />
                            </button>
                          </span>
                        )
                      })}
                    </div>
                  </div>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">ملاحظات إضافية</label>
                <textarea
                  value={editData.notes}
                  onChange={(e) => setEditData({ ...editData, notes: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  rows={3}
                  placeholder="ملاحظات إضافية عن الحجز..."
                />
              </div>
            </div>

            <div className="flex items-center justify-end space-x-3 rtl:space-x-reverse mt-6">
              <button
                onClick={() => setEditingBooking(null)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                إلغاء
              </button>
              <button
                onClick={saveBookingChanges}
                className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 flex items-center space-x-2 rtl:space-x-reverse"
                disabled={editData.selectedServices.length === 0}
              >
                <Save className="w-4 h-4" />
                <span>حفظ التعديلات</span>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* نافذة حذف الحجز */}
      {deletingBooking && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 max-w-md w-full mx-4">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-bold text-red-600 flex items-center space-x-2 rtl:space-x-reverse">
                <AlertTriangle className="w-5 h-5" />
                <span>تأكيد حذف الحجز</span>
              </h3>
              <button
                onClick={() => setDeletingBooking(null)}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="space-y-4">
              <div className="bg-red-50 p-3 rounded-lg border border-red-200">
                <p className="text-sm text-red-700 mb-2">سيتم حذف هذا الحجز نهائياً:</p>
                <p className="text-sm font-medium">العميلة: {deletingBooking.customerName}</p>
                <p className="text-sm font-medium">التاريخ: {formatArabicDateDisplay(deletingBooking.date)}</p>
                <p className="text-sm font-medium">الوقت: {formatIstanbulDate(fromDatabaseTime(deletingBooking.startTime), 'time')}</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">سبب الحذف *</label>
                <textarea
                  value={deleteReason}
                  onChange={(e) => setDeleteReason(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-transparent"
                  rows={3}
                  placeholder="يرجى توضيح سبب حذف الحجز..."
                  required
                />
              </div>
            </div>

            <div className="flex items-center justify-end space-x-3 rtl:space-x-reverse mt-6">
              <button
                onClick={() => setDeletingBooking(null)}
                className="px-4 py-2 text-gray-600 border border-gray-300 rounded-lg hover:bg-gray-50"
              >
                إلغاء
              </button>
              <button
                onClick={deleteBooking}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center space-x-2 rtl:space-x-reverse"
                disabled={!deleteReason.trim()}
              >
                <Trash2 className="w-4 h-4" />
                <span>حذف نهائياً</span>
              </button>
            </div>
          </div>
        </div>
      )}

      {showPhoneMenu && (
        <div
          className="fixed inset-0 z-5"
          onClick={() => setShowPhoneMenu(null)}
        />
      )}
    </div>
  )
}
