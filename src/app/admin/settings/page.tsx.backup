'use client';
import { logError } from '@/lib/logger-client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { ColorPicker } from 'antd';
import {
  ArrowLeft,
  Calendar,
  Palette,
  RotateCcw,
  Save,
  LogOut,
  AlertCircle,
  CheckCircle,
  X,
  Loader2,
  Clock,
  Globe,
  Settings,
  Coffee,
  Users,
} from 'lucide-react';

// استخدام Enhanced Theme System
import { useColorTheme } from '@/hooks/useColorTheme';
import { 
  BookingColors, 
  WeekSettings, 
  BusinessSettings,
  LunchBreakSettings,
  COLOR_LABELS,
  BUSINESS_LABELS,
  DAY_LABELS,
  TIMEZONE_OPTIONS,
  SLOT_DURATION_OPTIONS
} from '@/types/theme.types';

export default function EnhancedAdminSettingsPage() {
  const router = useRouter();
  const [message, setMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);
  const [isSaving, setIsSaving] = useState(false);
  const [activeTab, setActiveTab] = useState('colors'); // التبويب النشط

  // استخدام Enhanced Theme Context
  const { 
    colors, 
    weekSettings, 
    businessSettings, 
    lunchBreakSettings,
    isLoading, 
    error,
    updateColors,
    updateWeekSettings,
    updateBusinessSettings,
    updateLunchBreakSettings,
    resetToDefaults 
  } = useColorTheme();

  // State مؤقت للتعديلات (قبل الحفظ)
  const [tempColors, setTempColors] = useState<BookingColors>(colors);
  const [tempWeekSettings, setTempWeekSettings] = useState<WeekSettings>(weekSettings);
  const [tempBusinessSettings, setTempBusinessSettings] = useState<BusinessSettings>(businessSettings);
  const [tempLunchBreakSettings, setTempLunchBreakSettings] = useState<LunchBreakSettings>(lunchBreakSettings);

  // تحديث State المؤقت عند تغيير Context
  useEffect(() => {
    setTempColors(colors);
    setTempWeekSettings(weekSettings);
    setTempBusinessSettings(businessSettings);
    setTempLunchBreakSettings(lunchBreakSettings);
  }, [colors, weekSettings, businessSettings, lunchBreakSettings]);

  // التحقق من صحة الدخول
  useEffect(() => {
    const token = localStorage.getItem('adminToken');
    if (!token) {
      router.push('/admin/login');
      return;
    }
  }, [router]);

  // فحص إذا كانت هناك تغييرات
  const hasChanges = 
    JSON.stringify(tempColors) !== JSON.stringify(colors) ||
    JSON.stringify(tempWeekSettings) !== JSON.stringify(weekSettings) ||
    JSON.stringify(tempBusinessSettings) !== JSON.stringify(businessSettings) ||
    JSON.stringify(tempLunchBreakSettings) !== JSON.stringify(lunchBreakSettings);

  // دوال المعالجة
  const handleLogout = () => {
    localStorage.removeItem('adminToken');
    router.push('/admin/login');
  };

  const showMessage = (type: 'success' | 'error', text: string) => {
    setMessage({ type, text });
    setTimeout(() => setMessage(null), 3000);
  };

  // تطبيق الألوان مؤقتاً (معاينة فورية)
  const handleColorPreview = (colorKey: keyof BookingColors, value: string) => {
    const newTempColors = { ...tempColors, [colorKey]: value };
    setTempColors(newTempColors);

    // تطبيق مؤقت للمعاينة
    if (typeof document !== 'undefined') {
      const root = document.documentElement;
      root.style.setProperty(`--booking-color-${colorKey}`, value);
    }
  };

  // حفظ التغييرات
  const handleSaveChanges = async () => {
    try {
      setIsSaving(true);

      // حفظ الألوان إذا تغيرت
      if (JSON.stringify(tempColors) !== JSON.stringify(colors)) {
        await updateColors(tempColors);
      }

      // حفظ إعدادات الأسبوع إذا تغيرت
      if (JSON.stringify(tempWeekSettings) !== JSON.stringify(weekSettings)) {
        await updateWeekSettings(tempWeekSettings);
      }

      // حفظ إعدادات العمل إذا تغيرت
      if (JSON.stringify(tempBusinessSettings) !== JSON.stringify(businessSettings)) {
        await updateBusinessSettings(tempBusinessSettings);
      }

      // حفظ إعدادات استراحة الغداء إذا تغيرت
      if (JSON.stringify(tempLunchBreakSettings) !== JSON.stringify(lunchBreakSettings)) {
        await updateLunchBreakSettings(tempLunchBreakSettings);
      }

      showMessage('success', 'تم حفظ جميع التغييرات بنجاح!');
    } catch (error) {
      logError('خطأ في الحفظ:', error);
      showMessage('error', 'حدث خطأ أثناء حفظ التغييرات');
    } finally {
      setIsSaving(false);
    }
  };

  // إلغاء التغييرات
  const handleCancelChanges = () => {
    setTempColors(colors);
    setTempWeekSettings(weekSettings);
    setTempBusinessSettings(businessSettings);
    setTempLunchBreakSettings(lunchBreakSettings);

    // إعادة تطبيق الألوان الأصلية
    if (typeof document !== 'undefined') {
      const root = document.documentElement;
      root.style.setProperty('--booking-color-booked', colors.booked);
      root.style.setProperty('--booking-color-blocked', colors.blocked);
      root.style.setProperty('--booking-color-available', colors.available);
      root.style.setProperty('--booking-color-today', colors.today);
    }

    showMessage('success', 'تم إلغاء التغييرات');
  };

  // إعادة تعيين افتراضية
  const handleResetToDefaults = async () => {
    try {
      setIsSaving(true);
      await resetToDefaults();
      showMessage('success', 'تم إعادة تعيين جميع الإعدادات للافتراضية');
    } catch (error) {
      logError('خطأ في الإعادة:', error);
      showMessage('error', 'حدث خطأ أثناء إعادة التعيين');
    } finally {
      setIsSaving(false);
    }
  };

  // التبويبات
  const tabs = [
    { 
      id: 'colors', 
      label: 'الألوان', 
      icon: Palette,
      description: 'تخصيص ألوان الحجوزات'
    },
    { 
      id: 'business', 
      label: 'إعدادات العمل', 
      icon: Clock,
      description: 'ساعات العمل والمواعيد'
    },
    { 
      id: 'advanced', 
      label: 'الإعدادات المتقدمة', 
      icon: Settings,
      description: 'استراحة الغداء والإعدادات الأخرى'
    },
    { 
      id: 'week', 
      label: 'إعدادات الأسبوع', 
      icon: Calendar,
      description: 'تخصيص عرض الأسبوع'
    }
  ];

  // شاشة التحميل
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-gradient-to-r from-purple-500 to-indigo-600 rounded-full flex items-center justify-center mx-auto mb-4">
            <Loader2 className="w-8 h-8 text-white animate-spin" />
          </div>
          <p className="text-gray-600">جاري تحميل إعدادات النظام...</p>
        </div>
      </div>
    );
  }

  // شاشة الخطأ
  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <AlertCircle className="w-8 h-8 text-white" />
          </div>
          <p className="text-red-600 mb-4">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
          >
            إعادة المحاولة
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <Link href="/admin" className="flex items-center text-purple-600 hover:text-purple-800">
              <ArrowLeft className="w-5 h-5 ml-2" />
              العودة للوحة التحكم
            </Link>

            <div className="flex items-center space-x-4 rtl:space-x-reverse">
              <h1 className="text-xl font-bold text-gray-800">إعدادات النظام الشاملة</h1>
              <Settings className="w-6 h-6 text-purple-600" />
            </div>

            <button
              onClick={handleLogout}
              className="flex items-center space-x-2 rtl:space-x-reverse text-red-600 hover:text-red-800 transition-colors duration-300"
            >
              <LogOut className="w-4 h-4" />
              <span>خروج</span>
            </button>
          </div>
        </div>
      </header>

      <div className="max-w-6xl mx-auto px-4 py-8">
        {/* رسالة النجاح/الخطأ */}
        {message && (
          <div
            className={`mb-6 rounded-xl p-4 ${
              message.type === 'success'
                ? 'bg-green-50 border border-green-200'
                : 'bg-red-50 border border-red-200'
            }`}
          >
            <div className="flex items-center">
              {message.type === 'success' ? (
                <CheckCircle className="w-5 h-5 text-green-500 ml-2" />
              ) : (
                <AlertCircle className="w-5 h-5 text-red-500 ml-2" />
              )}
              <p className={message.type === 'success' ? 'text-green-700' : 'text-red-700'}>
                {message.text}
              </p>
            </div>
          </div>
        )}

        {/* التبويبات */}
        <div className="bg-white rounded-xl shadow-lg mb-6">
          <div className="border-b">
            <nav className="flex space-x-8 rtl:space-x-reverse px-6">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`py-4 px-2 border-b-2 font-medium text-sm whitespace-nowrap flex items-center space-x-2 rtl:space-x-reverse ${
                    activeTab === tab.id
                      ? 'border-purple-500 text-purple-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }`}
                >
                  <tab.icon className="w-4 h-4" />
                  <span>{tab.label}</span>
                </button>
              ))}
            </nav>
          </div>

          {/* محتوى التبويبات */}
          <div className="p-8">
            {/* تبويب الألوان */}
            {activeTab === 'colors' && (
              <div>
                <div className="flex items-center mb-6">
                  <Palette className="w-8 h-8 text-purple-600 ml-3" />
                  <div>
                    <h2 className="text-2xl font-bold text-gray-800">تخصيص ألوان الحجوزات</h2>
                    <p className="text-gray-600 mt-1">اختر الألوان المناسبة لحالات الحجوزات المختلفة</p>
                  </div>
                </div>

                {/* شبكة منتقيات الألوان */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
                  {(Object.keys(tempColors) as Array<keyof BookingColors>).map((colorKey) => (
                    <div key={colorKey} className="space-y-3">
                      <label className="block text-sm font-medium text-gray-700">
                        {COLOR_LABELS[colorKey]}
                      </label>
                      <div className="flex items-center space-x-3 rtl:space-x-reverse">
                        <ColorPicker
                          value={tempColors[colorKey]}
                          onChange={(color) => handleColorPreview(colorKey, color.toHexString())}
                          showText
                          size="large"
                        />
                        <div
                          className="w-16 h-12 rounded-lg border-2 border-gray-200 color-preview"
                          style={{ backgroundColor: tempColors[colorKey] }}
                          title="معاينة اللون"
                        />
                        <span className="text-sm text-gray-600 font-mono">{tempColors[colorKey]}</span>
                      </div>
                    </div>
                  ))}
                </div>

                {/* معاينة الألوان */}
                <div className="bg-gray-50 rounded-xl p-6">
                  <h3 className="text-lg font-semibold text-gray-800 mb-4">معاينة الألوان</h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    {(Object.keys(tempColors) as Array<keyof BookingColors>).map((colorKey) => (
                      <div key={colorKey} className="text-center">
                        <div
                          className="w-full h-20 rounded-lg mb-2 border-2 border-gray-200 flex items-center justify-center text-white font-semibold"
                          style={{ backgroundColor: tempColors[colorKey] }}
                        >
                          {COLOR_LABELS[colorKey].split(' ')[0]}
                        </div>
                        <span className="text-sm text-gray-600">{COLOR_LABELS[colorKey]}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* أيام العمل */}
                <div className="space-y-4 mt-8">
                  <label className="block text-lg font-medium text-gray-700">
                    <Users className="w-5 h-5 inline ml-2" />
                    أيام العمل
                  </label>
                  <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-3">
                    {Object.entries(DAY_LABELS).map(([dayValue, dayLabel]) => {
                      const dayNum = parseInt(dayValue);
                      const isSelected = tempBusinessSettings.workingDays.includes(dayNum);
                      
                      return (
                        <button
                          key={dayNum}
                          type="button"
                          onClick={() => {
                            const newWorkingDays = isSelected
                              ? tempBusinessSettings.workingDays.filter(d => d !== dayNum)
                              : [...tempBusinessSettings.workingDays, dayNum].sort();
                            
                            setTempBusinessSettings({
                              ...tempBusinessSettings,
                              workingDays: newWorkingDays
                            });
                          }}
                          className={`p-3 text-sm font-medium rounded-lg border-2 transition-all duration-200 ${
                            isSelected
                              ? 'border-blue-500 bg-blue-50 text-blue-700'
                              : 'border-gray-200 hover:border-gray-300 text-gray-600'
                          }`}
                        >
                          {dayLabel}
                        </button>
                      );
                    })}
                  </div>
                  <p className="text-sm text-gray-500">اختر الأيام التي يعمل فيها الصالون</p>
                </div>
              </div>
            )}

            {/* تبويب الإعدادات المتقدمة */}
            {activeTab === 'advanced' && (
              <div>
                <div className="flex items-center mb-6">
                  <Coffee className="w-8 h-8 text-orange-600 ml-3" />
                  <div>
                    <h2 className="text-2xl font-bold text-gray-800">الإعدادات المتقدمة</h2>
                    <p className="text-gray-600 mt-1">إعدادات استراحة الغداء والخيارات الإضافية</p>
                  </div>
                </div>

                {/* استراحة الغداء */}
                <div className="bg-orange-50 rounded-xl p-6 border border-orange-200">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center">
                      <Coffee className="w-6 h-6 text-orange-600 ml-2" />
                      <h3 className="text-xl font-semibold text-gray-800">استراحة الغداء</h3>
                    </div>
                    
                    <label className="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={tempLunchBreakSettings.enabled}
                        onChange={(e) => setTempLunchBreakSettings({
                          ...tempLunchBreakSettings,
                          enabled: e.target.checked
                        })}
                        className="sr-only"
                      />
                      <div className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                        tempLunchBreakSettings.enabled ? 'bg-orange-600' : 'bg-gray-200'
                      }`}>
                        <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                          tempLunchBreakSettings.enabled ? 'translate-x-6' : 'translate-x-1'
                        }`} />
                      </div>
                      <span className="ml-3 text-sm font-medium text-gray-700">
                        {tempLunchBreakSettings.enabled ? 'مفعل' : 'معطل'}
                      </span>
                    </label>
                  </div>

                  {tempLunchBreakSettings.enabled && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          بداية الاستراحة
                        </label>
                        <input
                          type="time"
                          value={tempLunchBreakSettings.start}
                          onChange={(e) => setTempLunchBreakSettings({
                            ...tempLunchBreakSettings,
                            start: e.target.value
                          })}
                          className="w-full p-3 border border-orange-300 rounded-lg focus:ring-orange-500 focus:border-orange-500"
                        />
                      </div>
                      
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          نهاية الاستراحة
                        </label>
                        <input
                          type="time"
                          value={tempLunchBreakSettings.end}
                          onChange={(e) => setTempLunchBreakSettings({
                            ...tempLunchBreakSettings,
                            end: e.target.value
                          })}
                          className="w-full p-3 border border-orange-300 rounded-lg focus:ring-orange-500 focus:border-orange-500"
                        />
                      </div>
                    </div>
                  )}

                  <div className="mt-4 p-4 bg-orange-100 rounded-lg">
                    <p className="text-sm text-orange-800">
                      <strong>ملاحظة:</strong> عند تفعيل استراحة الغداء، لن تكون هناك مواعيد متاحة خلال هذه الفترة.
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* تبويب إعدادات الأسبوع */}
            {activeTab === 'week' && (
              <div>
                <div className="flex items-center mb-6">
                  <Calendar className="w-8 h-8 text-green-600 ml-3" />
                  <div>
                    <h2 className="text-2xl font-bold text-gray-800">إعدادات الأسبوع</h2>
                    <p className="text-gray-600 mt-1">اختر اليوم الأول في الأسبوع لعرض التقويم</p>
                  </div>
                </div>

                {/* اختيار أول يوم في الأسبوع */}
                <div className="space-y-4">
                  <label className="block text-lg font-medium text-gray-700">أول يوم في الأسبوع</label>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {[
                      { value: 0, label: 'الأحد', emoji: '🌅', desc: 'النظام الأمريكي/العربي' },
                      { value: 1, label: 'الإثنين', emoji: '🌍', desc: 'النظام الأوروبي/الدولي' },
                      { value: 6, label: 'السبت', emoji: '🕌', desc: 'النظام الإسلامي التقليدي' },
                    ].map((option) => (
                      <div
                        key={option.value}
                        onClick={() => setTempWeekSettings({
                          ...tempWeekSettings,
                          firstDayOfWeek: option.value as 0 | 1 | 6
                        })}
                        className={`p-4 rounded-xl border-2 cursor-pointer transition-all duration-200 ${
                          tempWeekSettings.firstDayOfWeek === option.value
                            ? 'border-green-500 bg-green-50 shadow-md'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-2xl mb-2">{option.emoji}</div>
                          <h3 className="font-semibold text-gray-800">{option.label}</h3>
                          <p className="text-sm text-gray-600 mt-1">{option.desc}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* أزرار التحكم */}
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex flex-col sm:flex-row gap-4 justify-between">
            <div className="flex gap-3">
              <button
                onClick={handleSaveChanges}
                disabled={isSaving || !hasChanges}
                className="flex items-center space-x-2 rtl:space-x-reverse bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-300"
              >
                {isSaving ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  <Save className="w-5 h-5" />
                )}
                <span>{isSaving ? 'جاري الحفظ...' : 'حفظ جميع التغييرات'}</span>
              </button>

              <button
                onClick={handleCancelChanges}
                disabled={!hasChanges}
                className="flex items-center space-x-2 rtl:space-x-reverse bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-300"
              >
                <X className="w-5 h-5" />
                <span>إلغاء التغييرات</span>
              </button>
            </div>

            <button
              onClick={handleResetToDefaults}
              disabled={isSaving}
              className="flex items-center space-x-2 rtl:space-x-reverse bg-orange-600 text-white px-6 py-3 rounded-lg hover:bg-orange-700 disabled:opacity-50 transition-colors duration-300"
            >
              <RotateCcw className="w-5 h-5" />
              <span>إعادة تعيين افتراضية</span>
            </button>
          </div>

          {hasChanges && (
            <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div className="flex items-center">
                <AlertCircle className="w-5 h-5 text-yellow-500 ml-2" />
                <p className="text-yellow-700 text-sm">
                  يوجد تغييرات غير محفوظة في التبويب النشط. اضغط "حفظ جميع التغييرات" لتطبيقها على النظام.
                </p>
              </div>
            </div>
          )}
        </div>

        {/* معلومات النظام */}
        <div className="mt-6 bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">معلومات النظام</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <span className="font-medium text-gray-600">المنطقة الزمنية الحالية:</span>
              <p className="text-gray-800">{businessSettings.timezone}</p>
            </div>
            <div>
              <span className="font-medium text-gray-600">ساعات العمل:</span>
              <p className="text-gray-800">
                {businessSettings.businessHours.start} - {businessSettings.businessHours.end}
              </p>
            </div>
            <div>
              <span className="font-medium text-gray-600">مدة الموعد:</span>
              <p className="text-gray-800">{businessSettings.slotDuration} دقيقة</p>
            </div>
          </div>
        </div>

        {/* روابط سريعة */}
        <div className="mt-6 bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">روابط سريعة</h3>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <Link
              href="/admin/bookings"
              className="flex items-center space-x-2 rtl:space-x-reverse text-purple-600 hover:text-purple-800 transition-colors"
            >
              <Calendar className="w-5 h-5" />
              <span>إدارة الحجوزات</span>
            </Link>
            <Link
              href="/admin/customers"
              className="flex items-center space-x-2 rtl:space-x-reverse text-blue-600 hover:text-blue-800 transition-colors"
            >
              <Users className="w-5 h-5" />
              <span>إدارة العملاء</span>
            </Link>
            <Link
              href="/admin/services"
              className="flex items-center space-x-2 rtl:space-x-reverse text-green-600 hover:text-green-800 transition-colors"
            >
              <Settings className="w-5 h-5" />
              <span>إدارة الخدمات</span>
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}

            {/* تبويب إعدادات العمل */}
            {activeTab === 'business' && (
              <div>
                <div className="flex items-center mb-6">
                  <Clock className="w-8 h-8 text-blue-600 ml-3" />
                  <div>
                    <h2 className="text-2xl font-bold text-gray-800">إعدادات العمل</h2>
                    <p className="text-gray-600 mt-1">تحديد ساعات العمل والمواعيد والمنطقة الزمنية</p>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                  {/* المنطقة الزمنية */}
                  <div className="space-y-4">
                    <label className="block text-lg font-medium text-gray-700">
                      <Globe className="w-5 h-5 inline ml-2" />
                      المنطقة الزمنية
                    </label>
                    <select
                      value={tempBusinessSettings.timezone}
                      onChange={(e) => setTempBusinessSettings({
                        ...tempBusinessSettings,
                        timezone: e.target.value
                      })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                    >
                      {TIMEZONE_OPTIONS.map((tz) => (
                        <option key={tz.value} value={tz.value}>
                          {tz.label}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* مدة الموعد */}
                  <div className="space-y-4">
                    <label className="block text-lg font-medium text-gray-700">
                      مدة الموعد الافتراضي
                    </label>
                    <select
                      value={tempBusinessSettings.slotDuration}
                      onChange={(e) => setTempBusinessSettings({
                        ...tempBusinessSettings,
                        slotDuration: parseInt(e.target.value)
                      })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                    >
                      {SLOT_DURATION_OPTIONS.map((duration) => (
                        <option key={duration.value} value={duration.value}>
                          {duration.label}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* ساعات العمل */}
                  <div className="space-y-4">
                    <label className="block text-lg font-medium text-gray-700">
                      ساعات العمل
                    </label>
                    <div className="flex space-x-4 rtl:space-x-reverse">
                      <div className="flex-1">
                        <label className="block text-sm text-gray-600 mb-1">من</label>
                        <input
                          type="time"
                          value={tempBusinessSettings.businessHours.start}
                          onChange={(e) => setTempBusinessSettings({
                            ...tempBusinessSettings,
                            businessHours: {
                              ...tempBusinessSettings.businessHours,
                              start: e.target.value
                            }
                          })}
                          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                        />
                      </div>
                      <div className="flex-1">
                        <label className="block text-sm text-gray-600 mb-1">إلى</label>
                        <input
                          type="time"
                          value={tempBusinessSettings.businessHours.end}
                          onChange={(e) => setTempBusinessSettings({
                            ...tempBusinessSettings,
                            businessHours: {
                              ...tempBusinessSettings.businessHours,
                              end: e.target.value
                            }
                          })}
                          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                        />
                      </div>
                    </div>
                  </div>

                  {/* الفترة بين المواعيد */}
                  <div className="space-y-4">
                    <label className="block text-lg font-medium text-gray-700">
                      الحد الأدنى بين المواعيد (دقيقة)
                    </label>
                    <input
                      type="number"
                      min="0"
                      max="60"
                      value={tempBusinessSettings.minBookingGap}
                      onChange={(e) => setTempBusinessSettings({
                        ...tempBusinessSettings,
                        minBookingGap: parseInt(e.target.value) || 0
                      })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>