// eslint.config.mjs - ES Modules Configuration for SaaS Architecture
import js from '@eslint/js'
import tsPlugin from '@typescript-eslint/eslint-plugin'
import tsParser from '@typescript-eslint/parser'
import reactPlugin from 'eslint-plugin-react'
import reactHooksPlugin from 'eslint-plugin-react-hooks'

export default [
  // Global ignores
  {
    ignores: [
      '.next/**',
      'node_modules/**',
      'out/**',
      'dist/**',
      'build/**',
      '*.config.js',
      '*.config.mjs',
      '*.config.ts'
    ]
  },

  // Base JavaScript configuration
  js.configs.recommended,

  // TypeScript files configuration
  {
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      parser: tsParser,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true
        },
        project: './tsconfig.json'
      },
      globals: {
        React: 'readonly',
        JSX: 'readonly'
      }
    },
    plugins: {
      '@typescript-eslint': tsPlugin,
      'react': reactPlugin,
      'react-hooks': reactHooksPlugin
    },
    rules: {
      // ✅ TypeScript strict rules for SaaS quality
      '@typescript-eslint/no-explicit-any': 'error',
      '@typescript-eslint/no-unused-vars': 'error',
      '@typescript-eslint/prefer-const': 'error',
      '@typescript-eslint/no-var-requires': 'error',
      '@typescript-eslint/explicit-function-return-type': 'off', // Too strict for React
      '@typescript-eslint/explicit-module-boundary-types': 'warn',
      '@typescript-eslint/no-empty-function': 'warn',
      '@typescript-eslint/no-inferrable-types': 'error',
      
      // ✅ React/JSX rules for component architecture
      'react/prop-types': 'off', // Using TypeScript instead
      'react/react-in-jsx-scope': 'off', // Next.js handles this
      'react/jsx-uses-react': 'off',
      'react/jsx-uses-vars': 'error',
      'react/no-unescaped-entities': 'off',
      
      // ✅ React Hooks rules (critical for SaaS)
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',
      
      // ✅ General code quality
      'no-console': 'warn',
      'no-debugger': 'error',
      'prefer-const': 'error',
      'no-var': 'error',
      'object-shorthand': 'error',
      'prefer-destructuring': ['warn', {
        array: false,
        object: true
      }],
      
      // ✅ Import/Export rules for modular architecture
      'no-duplicate-imports': 'error',
      'sort-imports': ['warn', {
        ignoreCase: true,
        ignoreDeclarationSort: true
      }]
    }
  },

  // React components specific rules
  {
    files: ['**/*.tsx'],
    rules: {
      '@typescript-eslint/no-empty-interface': 'warn',
      'react/jsx-no-undef': 'error'
    }
  },

  // API routes specific rules
  {
    files: ['src/app/api/**/*.{js,ts}'],
    rules: {
      'no-console': 'off', // Console allowed in API routes
      '@typescript-eslint/no-explicit-any': 'warn' // More lenient in API
    }
  },

  // Utility and helper files
  {
    files: ['src/**/utils/**/*.{js,ts}', 'src/**/helpers/**/*.{js,ts}'],
    rules: {
      '@typescript-eslint/explicit-function-return-type': 'warn' // Stricter for utilities
    }
  },

  // Test files (when added)
  {
    files: ['**/*.test.{js,ts,tsx}', '**/*.spec.{js,ts,tsx}'],
    rules: {
      '@typescript-eslint/no-explicit-any': 'off',
      'no-console': 'off'
    }
  }
]