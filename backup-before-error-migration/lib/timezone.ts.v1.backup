// src/lib/timezone.ts
// مكتبة التوقيت المساعدة لتوقيت إسطنبول (GMT+3)
import { AppSettings } from './app-settings';
// متغير مؤقت للتوافق مع الكود الحالي
export const ISTANBUL_TIMEZONE = 'Europe/Istanbul';

// الحصول على المنطقة الزمنية الديناميكية
export async function getAppTimezone(): Promise<string> {
  try {
    return await AppSettings.getTimezone();
  } catch (error) {
    console.error('خطأ في قراءة المنطقة الزمنية:', error);
    return ISTANBUL_TIMEZONE; // fallback للقيمة الافتراضية
  }
}
/**
 * إنشاء تاريخ جديد بتوقيت إسطنبول
 */
export function createIstanbulDate(dateInput?: string | number | Date): Date {
  if (!dateInput) {
    // التاريخ والوقت الحالي بتوقيت إسطنبول
    return new Date(new Date().toLocaleString('en-US', { timeZone: ISTANBUL_TIMEZONE }));
  }

  if (typeof dateInput === 'string') {
    // إذا كان النص يحتوي على وقت، نستخدمه مباشرة
    if (dateInput.includes('T') || dateInput.includes(' ')) {
      return new Date(dateInput);
    }
    // إذا كان تاريخ فقط، نضيف الوقت الافتراضي
    return new Date(dateInput + 'T00:00:00');
  }

  return new Date(dateInput);
}

/**
 * تحويل تاريخ ووقت لتوقيت إسطنبول
 */
export function toIstanbulTime(date: Date): Date {
  return new Date(date.toLocaleString('en-US', { timeZone: ISTANBUL_TIMEZONE }));
}

/**
 * إنشاء تاريخ من سلسلة نصية بتوقيت إسطنبول
 */
export function parseIstanbulDate(dateString: string, timeString?: string): Date {
  if (timeString) {
    // دمج التاريخ والوقت
    const [year, month, day] = dateString.split('-').map(Number);
    const [hours, minutes] = timeString.split(':').map(Number);

    // إنشاء التاريخ بالتوقيت المحلي مباشرة (بدون تحويل UTC)
    return new Date(year, month - 1, day, hours, minutes, 0, 0);
  }

  // تاريخ فقط
  const [year, month, day] = dateString.split('-').map(Number);
  return new Date(year, month - 1, day, 0, 0, 0, 0);
}

/**
 * تنسيق التاريخ بتوقيت إسطنبول
 */
export function formatIstanbulDate(
  date: Date,
  format: 'date' | 'time' | 'datetime' = 'date',
): string {
  const istanbulDate = toIstanbulTime(date);

  switch (format) {
    case 'date':
      return istanbulDate.toLocaleDateString('en-CA'); // YYYY-MM-DD
    case 'time':
      return istanbulDate.toLocaleTimeString('en-GB', {
        hour12: false,
        hour: '2-digit',
        minute: '2-digit',
      }); // HH:MM
    case 'datetime':
      return istanbulDate.toLocaleString('sv-SE').replace(' ', 'T'); // YYYY-MM-DDTHH:MM:SS
    default:
      return istanbulDate.toISOString();
  }
}

/**
 * الحصول على بداية اليوم بتوقيت إسطنبول
 */
export function getIstanbulStartOfDay(date?: Date): Date {
  const targetDate = date || createIstanbulDate();
  const istanbulDate = toIstanbulTime(targetDate);
  return new Date(
    istanbulDate.getFullYear(),
    istanbulDate.getMonth(),
    istanbulDate.getDate(),
    0,
    0,
    0,
    0,
  );
}

/**
 * الحصول على نهاية اليوم بتوقيت إسطنبول
 */
export function getIstanbulEndOfDay(date?: Date): Date {
  const targetDate = date || createIstanbulDate();
  const istanbulDate = toIstanbulTime(targetDate);
  return new Date(
    istanbulDate.getFullYear(),
    istanbulDate.getMonth(),
    istanbulDate.getDate(),
    23,
    59,
    59,
    999,
  );
}

/**
 * تحويل التوقيت من قاعدة البيانات للعرض
 */
export function fromDatabaseTime(dbDateTime: string | Date): Date {
  const date = typeof dbDateTime === 'string' ? new Date(dbDateTime) : dbDateTime;
  // نعتبر أن الوقت في قاعدة البيانات هو بتوقيت إسطنبول
  return date;
}

/**
 * تحويل التوقيت للحفظ في قاعدة البيانات
 */
export function toDatabaseTime(localDateTime: Date): Date {
  // نحفظ التوقيت كما هو (بتوقيت إسطنبول)
  return localDateTime;
}

/**
 * مقارنة تاريخين بتوقيت إسطنبول (بدون الوقت)
 */
export function isSameDayIstanbul(date1: Date, date2: Date): boolean {
  const istanbul1 = toIstanbulTime(date1);
  const istanbul2 = toIstanbulTime(date2);

  return (
    istanbul1.getFullYear() === istanbul2.getFullYear() &&
    istanbul1.getMonth() === istanbul2.getMonth() &&
    istanbul1.getDate() === istanbul2.getDate()
  );
}

/**
 * الحصول على التاريخ الحالي بصيغة YYYY-MM-DD بتوقيت إسطنبول
 */
export function getTodayIstanbul(): string {
  return formatIstanbulDate(createIstanbulDate(), 'date');
}

/**
 * التحقق من كون التاريخ اليوم بتوقيت إسطنبول
 */
export function isToday(date: Date): boolean {
  const today = createIstanbulDate();
  return isSameDayIstanbul(date, today);
}

/**
 * إضافة/طرح أيام من تاريخ بتوقيت إسطنبول
 */
export function addDaysIstanbul(date: Date, days: number): Date {
  const result = new Date(date);
  result.setDate(result.getDate() + days);
  return result;
}

/**
 * الحصول على اسم اليوم بالعربية
 */
export function getArabicDayName(date: Date): string {
  const dayNames = ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'];
  const istanbulDate = toIstanbulTime(date);
  return dayNames[istanbulDate.getDay()];
}

/**
 * الحصول على اسم الشهر بالعربية
 */
export function getArabicMonthName(date: Date): string {
  const monthNames = [
    'يناير',
    'فبراير',
    'مارس',
    'أبريل',
    'مايو',
    'يونيو',
    'يوليو',
    'أغسطس',
    'سبتمبر',
    'أكتوبر',
    'نوفمبر',
    'ديسمبر',
  ];
  const istanbulDate = toIstanbulTime(date);
  return monthNames[istanbulDate.getMonth()];
}

/**
 * تنسيق التاريخ بالعربية بتوقيت إسطنبول
 */
export function formatArabicDate(date: Date): string {
  const istanbulDate = toIstanbulTime(date);
  const dayName = getArabicDayName(istanbulDate);
  const monthName = getArabicMonthName(istanbulDate);
  const day = istanbulDate.getDate();
  const year = istanbulDate.getFullYear();

  return `${dayName}، ${day} ${monthName} ${year}`;
}

/**
 * دالة إنشاء أيام الشهر للتقويم - النسخة المحسنة
 * ترجع بيانات مفصلة متوافقة مع CalendarGrid.tsx
 */
export function getDaysInMonth(date: Date): Array<{
  date: string;
  day: number;
  isCurrentMonth: boolean;
  isPast: boolean;
  isToday: boolean;
}> {
  const currentDate = toIstanbulTime(new Date());
  const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);
  const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);
  const firstDayOfWeek = firstDay.getDay();
  const daysInMonth = lastDay.getDate();

  const days = [];

  // أيام الشهر السابق
  for (let i = firstDayOfWeek - 1; i >= 0; i--) {
    const prevDate = new Date(date.getFullYear(), date.getMonth(), -i);
    const dateString = formatIstanbulDate(prevDate, 'date');
    days.push({
      date: dateString,
      day: prevDate.getDate(),
      isCurrentMonth: false,
      isPast: prevDate < getIstanbulStartOfDay(currentDate),
      isToday: isSameDayIstanbul(prevDate, currentDate),
    });
  }

  // أيام الشهر الحالي
  for (let day = 1; day <= daysInMonth; day++) {
    const currentDay = new Date(date.getFullYear(), date.getMonth(), day);
    const dateString = formatIstanbulDate(currentDay, 'date');
    days.push({
      date: dateString,
      day: day,
      isCurrentMonth: true,
      isPast: currentDay < getIstanbulStartOfDay(currentDate),
      isToday: isSameDayIstanbul(currentDay, currentDate),
    });
  }

  // أيام الشهر التالي لملء الشبكة (إجمالي 42 يوم = 6 أسابيع × 7 أيام)
  const remainingDays = 42 - days.length;
  for (let day = 1; day <= remainingDays; day++) {
    const nextDate = new Date(date.getFullYear(), date.getMonth() + 1, day);
    const dateString = formatIstanbulDate(nextDate, 'date');
    days.push({
      date: dateString,
      day: day,
      isCurrentMonth: false,
      isPast: nextDate < getIstanbulStartOfDay(currentDate),
      isToday: isSameDayIstanbul(nextDate, currentDate),
    });
  }

  return days;
}
export function formatArabicDateDisplay(dateString: string): string {
  const dateObj = fromDatabaseTime(dateString);
  return formatArabicDate(dateObj);
}
/**
 * إنشاء تاريخ بالمنطقة الزمنية المحددة في الإعدادات
 */
export async function createAppTimezoneDate(dateInput?: string | number | Date): Promise<Date> {
  const timezone = await getAppTimezone();
  
  if (!dateInput) {
    return new Date(new Date().toLocaleString('en-US', { timeZone: timezone }));
  }

  if (typeof dateInput === 'string') {
    if (dateInput.includes('T') || dateInput.includes(' ')) {
      return new Date(dateInput);
    }
    return new Date(dateInput + 'T00:00:00');
  }

  return new Date(dateInput);
}