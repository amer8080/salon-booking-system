import { parseServices, formatServicesForDatabase } from '@/lib/services-utils';
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { parseIstanbulDate, toDatabaseTime } from '@/lib/timezone';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const startDate = searchParams.get('startDate');
    const endDate = searchParams.get('endDate');
    const view = searchParams.get('view') || 'day';

    if (!startDate || !endDate) {
      return NextResponse.json(
        { success: false, error: 'Start date and end date are required' },
        { status: 400 }
      );
    }

    // تحويل التواريخ إلى تنسيق قاعدة البيانات
    const startDateTime = toDatabaseTime(parseIstanbulDate(startDate));
    const endDateTime = toDatabaseTime(parseIstanbulDate(endDate, '23:59'));

    const reservations = await prisma.reservation.findMany({
      where: {
        reservationDate: {
          gte: startDateTime,
          lte: endDateTime,
        },
      },
      include: {
        customer: {
          select: {
            id: true,
            name: true,
            phone: true,
          },
        },
        services: {
          include: {
            service: {
              select: {
                id: true,
                nameAr: true,
                nameEn: true,
                nameTr: true,
                duration: true,
                price: true,
                category: true,
              },
            },
          },
        },
      },
      orderBy: {
        reservationDate: 'asc',
      },
    });

    // تحويل البيانات للعرض
    const formattedReservations = reservations.map((reservation) => ({
      id: reservation.id,
      date: reservation.reservationDate,
      time: reservation.reservationTime,
      duration: reservation.duration,
      totalPrice: reservation.totalPrice,
      status: reservation.status,
      notes: reservation.notes,
      customer: reservation.customer,
      services: reservation.services.map((rs) => ({
        id: rs.service.id,
        name: rs.service.nameAr || rs.service.nameEn || rs.service.nameTr,
        nameAr: rs.service.nameAr,
        nameEn: rs.service.nameEn,
        nameTr: rs.service.nameTr,
        duration: rs.service.duration,
        price: rs.service.price,
        category: rs.service.category,
      })),
      createdAt: reservation.createdAt,
      updatedAt: reservation.updatedAt,
    }));

    return NextResponse.json({
      success: true,
      data: formattedReservations,
      count: formattedReservations.length,
      view,
      dateRange: {
        start: startDate,
        end: endDate,
      },
    });
  } catch (error) {
    console.error('Error fetching bookings:', error);
    return NextResponse.json(
      { success: false, error: 'خطأ في جلب الحجوزات' },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const {
      customerId,
      services: serviceIds,
      reservationDate,
      reservationTime,
      notes,
    } = body;

    // التحقق من صحة البيانات
    if (!customerId || !serviceIds || !reservationDate || !reservationTime) {
      return NextResponse.json(
        { success: false, error: 'جميع الحقول مطلوبة' },
        { status: 400 }
      );
    }

    // التحقق من وجود العميل
    const customer = await prisma.customer.findUnique({
      where: { id: customerId },
    });

    if (!customer) {
      return NextResponse.json(
        { success: false, error: 'العميل غير موجود' },
        { status: 404 }
      );
    }

    // التحقق من وجود الخدمات
    const services = await prisma.service.findMany({
      where: {
        id: { in: serviceIds },
      },
    });

    if (services.length !== serviceIds.length) {
      return NextResponse.json(
        { success: false, error: 'إحدى الخدمات غير موجودة' },
        { status: 404 }
      );
    }

    // حساب المدة الإجمالية والسعر
    const totalDuration = services.reduce((sum, service) => sum + service.duration, 0);
    const totalPrice = services.reduce((sum, service) => sum + service.price, 0);

    // تحويل التاريخ والوقت للحفظ في قاعدة البيانات
    const dbDateTime = toDatabaseTime(parseIstanbulDate(reservationDate, reservationTime));

    // التحقق من تضارب المواعيد
    const conflictingReservation = await prisma.reservation.findFirst({
      where: {
        reservationDate: dbDateTime,
        status: {
          not: 'cancelled',
        },
      },
    });

    if (conflictingReservation) {
      return NextResponse.json(
        { success: false, error: 'هذا الموعد محجوز بالفعل' },
        { status: 409 }
      );
    }

    // إنشاء الحجز
    const reservation = await prisma.reservation.create({
      data: {
        customerId,
        reservationDate: dbDateTime,
        reservationTime,
        duration: totalDuration,
        totalPrice,
        status: 'confirmed',
        notes: notes || null,
        services: {
          create: services.map((service) => ({
            serviceId: service.id,
          })),
        },
      },
      include: {
        customer: {
          select: {
            id: true,
            name: true,
            phone: true,
          },
        },
        services: {
          include: {
            service: {
              select: {
                id: true,
                nameAr: true,
                nameEn: true,
                nameTr: true,
                duration: true,
                price: true,
                category: true,
              },
            },
          },
        },
      },
    });

    // تحويل البيانات للعرض
    const formattedReservation = {
      id: reservation.id,
      date: reservation.reservationDate,
      time: reservation.reservationTime,
      duration: reservation.duration,
      totalPrice: reservation.totalPrice,
      status: reservation.status,
      notes: reservation.notes,
      customer: reservation.customer,
      services: reservation.services.map((rs) => ({
        id: rs.service.id,
        name: rs.service.nameAr || rs.service.nameEn || rs.service.nameTr,
        nameAr: rs.service.nameAr,
        nameEn: rs.service.nameEn,
        nameTr: rs.service.nameTr,
        duration: rs.service.duration,
        price: rs.service.price,
        category: rs.service.category,
      })),
      createdAt: reservation.createdAt,
      updatedAt: reservation.updatedAt,
    };

    return NextResponse.json({
      success: true,
      data: formattedReservation,
      message: 'تم إنشاء الحجز بنجاح',
    });
  } catch (error) {
    console.error('Error creating booking:', error);
    return NextResponse.json(
      { success: false, error: 'خطأ في إنشاء الحجز' },
      { status: 500 }
    );
  }
}